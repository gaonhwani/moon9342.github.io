<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>https://moon9342.github.io/</title>
   
   <link>https://moon9342.github.io/</link>
   <description>얼큰우동TV, 쉽게배우는 IT(Programming,Machine Learning,금융)</description>
   <language>en-uk</language>
   
   <title>
   <![CDATA[ IT Technical Training ]]>
   </title>
   <description>
   <![CDATA[ 얼큰우동TV, 쉽게배우는 IT(Programming,Machine Learning,금융) ]]>
   </description>
   <link>https://moon9342.github.io/</link>
   <image>
   <url>https://moon9342.github.io/assets/built/images/favicon.jpg</url>
   <title>IT Technical Training</title>
   <link>https://moon9342.github.io/</link>
   </image>
   <generator>Jekyll 3.6.2</generator>
   <lastBuildDate></lastBuildDate>
   <atom:link href="https://moon9342.github.io/rss.xml" rel="self" type="application/rss+xml"/>
   <ttl>60</ttl>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Python Django 웹 프레임워크(8) - Lecture Sample project 개발(2)</title>
	  <link>https://moon9342.github.io/python-lecture-python-django-lecture-sample-project_2</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-05-09T01:40:00+09:00</pubDate>
	  <guid>https://moon9342.github.io/python-lecture-python-django-lecture-sample-project_2</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Python 기초강의는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./python-lecture-python-introduction">Python 기초강의(1) - Introduction</a></li>
    <li><a href="./python-lecture-python-basic">Python 기초강의(2) - Python 기본</a></li>
    <li><a href="./python-lecture-python-control-statement">Python 기초강의(3) - Python 제어문</a></li>
    <li><a href="./python-lecture-python-function">Python 기초강의(4) - Python function</a></li>
    <li><a href="./python-lecture-python-program-exercise-1">Python 기초강의(5) - Python 연습문제(1)</a></li>
    <li><a href="./python-lecture-python-OOP">Python 기초강의(6) - Python 객체지향</a></li>
    <li><a href="./python-lecture-python-magic-function">Python 기초강의(7) - Python Magic Function</a></li>
    <li><a href="./python-lecture-python-first-class">Python 기초강의(8) - Python First Class</a></li>
    <li><a href="./python-lecture-python-closure">Python 기초강의(9) - Python Closure</a></li>
    <li><a href="./python-lecture-python-decorator">Python 기초강의(10) - Python Decorator</a></li>
    <li><a href="./python-lecture-python-generator">Python 기초강의(11) - Python Generator</a></li>
    <li><a href="./python-lecture-python-module">Python 기초강의(12) - Python Module</a></li>
    <li><a href="./python-lecture-python-exception">Python 기초강의(13) - Python Exception &amp; File</a></li>
    <li><a href="./python-lecture-python-oop-exercise">Python 기초강의(14) - Python 연습문제(2)</a></li>
    <li><a href="./python-lecture-python-web-basic-jquery">Web basic &amp; jQuery(Front End Web Application)</a></li>
    <li><a href="./python-lecture-python-django-introduction">Python Django 웹 프레임워크(1) - introduction</a></li>
    <li><a href="./python-lecture-python-django-poll-project-1">Python Django 웹 프레임워크(2) - Poll project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-2">Python Django 웹 프레임워크(3) - Poll project 개발(2)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-3">Python Django 웹 프레임워크(4) - Poll project 개발(3)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-4">Python Django 웹 프레임워크(5) - Poll project 개발(4)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-5">Python Django 웹 프레임워크(6) - Poll project 개발(5)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_1">Python Django 웹 프레임워크(7) - LectureSample project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_2">Python Django 웹 프레임워크(8) - LectureSample project 개발(2)</a></li>


</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Lecture Sample project 개발(2)</strong></p>

<p>이번에는 이전에 구현한 Lecture Sample Project에 다음의 기능을 추가해 보겠습니다.</p>

<ul>
  <li>Auth module의 User class 확장과 Auth class와 User Define BackEnd class를
이용한 사용자 관리 및 인증</li>
</ul>

<p><strong class="subtitle2_fontAwesome">application 추가</strong></p>

<p>working directory를 LectureSampleProject 폴더로 변경합니다.</p>
<blockquote>
  <p><strong>C:/python-Django&gt; cd LectureSampleProject</strong></p>
</blockquote>

<p>users application을 생성합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py startapp users</strong></p>
</blockquote>

<p>이후부터는 PyCharm을 이용해 작업을 진행합니다.</p>

<p><strong class="subtitle2_fontAwesome">project 환경설정</strong></p>

<p><code class="highlighter-rouge">INSTALLED_APPS</code> 부분에 <code class="highlighter-rouge">users</code> application을 등록합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
    <span class="s">'bbs.apps.BbsConfig'</span><span class="p">,</span>
    <span class="s">'bootstrap4'</span><span class="p">,</span>
    <span class="s">'users.apps.UsersConfig'</span>
<span class="p">]</span>

</code></pre></div></div>

<p>사용자 관리를 위해서 Auth module의 User class를 이용합니다. 그런데 이 User class를
직접사용하는게 아닌 AbstractUser class를 상속해서 사용하려 합니다. 
확장한 class는 Member라는 이름의 class로 하겠습니다.</p>

<p>추후에 사용자 인증은 User class가 아닌 이 상속된 Member class를 이용할 것이고 이에 
대한 설정을 settings.py에 추가적으로 넣어야 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c"># 인증에 사용할 class를 지정( app이름.class이름 )</span>
<span class="n">AUTH_USER_MODEL</span> <span class="o">=</span> <span class="s">'users.Member'</span>

<span class="c"># 인증에 사용할 사용자 정의 BACKEND</span>
<span class="c"># 사용자 정의 BACKEND를 Django의 기본 ModelBackend 이전에 넣어줍니다.</span>
<span class="c"># 일반적으로 타 사이트에 인증이 된 경우 우리 site도 인증된 사용자로 처리할 경우</span>
<span class="c"># 이 방식을 이용합니다. </span>

<span class="n">AUTHENTICATION_BACKENDS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c"># 'users.my_auth.UserBackend',</span>
    <span class="s">'django.contrib.auth.backends.ModelBackend'</span><span class="p">,</span>
<span class="p">]</span>

</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">Model 생성</strong></p>

<p>Model을 생성하기 위해 users application 내의 <code class="highlighter-rouge">models.py</code> 파일에 다음과 같은 내용을
입력합니다. 여기서 주의해야 할 점은 제공된 User class를 그대로 사용하지 않고
User class를 확장해서 Member class를 정의해서 사용한다는 것입니다. 단순히 
User class를 이용해도 되지만 만약 추가적인 필드(전화번호, 사진이미지)가 필요하다면
제공된 User class를 확장해서 사용하며 이 경우 4가지 정도의 방법이 있습니다.
여기서는 간단하게 AbstractUser class를 상속하는 방식으로 진행하겠습니다.
(이것외에 프록시 모델 기법, ForeignKey 이용, AbstractBaseUser를 상속하는 방법이 있습니다.)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">AbstractUser</span>


<span class="k">class</span> <span class="nc">Member</span><span class="p">(</span><span class="n">AbstractUser</span><span class="p">):</span>
    <span class="n">mobile</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ImageField</span><span class="p">(</span><span class="n">upload_to</span><span class="o">=</span><span class="s">'images/'</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>로그인시 데이터 입력에 ModelForm을 사용하기 위해 <code class="highlighter-rouge">forms.py</code>에 다음의 class를 정의합니다. 회원가입을 위한
ModelForm은 추후에 추가로 작성합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Member</span>


<span class="k">class</span> <span class="nc">LoginForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">ModelForm</span><span class="p">):</span>

    <span class="n">password</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span>
        <span class="n">label</span><span class="o">=</span><span class="s">'Password'</span><span class="p">,</span>
        <span class="n">widget</span><span class="o">=</span><span class="n">forms</span><span class="o">.</span><span class="n">PasswordInput</span><span class="p">(</span>
            <span class="n">attrs</span><span class="o">=</span><span class="p">{</span>
                <span class="s">'class'</span><span class="p">:</span> <span class="s">'form-control'</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">)</span>
    <span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">'username'</span><span class="p">,</span> <span class="s">'password'</span><span class="p">]</span>


</code></pre></div></div>

<p>Admin Page에 반영하기 위해서 users application 내의 <code class="highlighter-rouge">admin.py</code>에 class를 등록합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Member</span>

<span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Member</span><span class="p">)</span>

</code></pre></div></div>

<p>사용자 관리 기능(users application)을 추가했기 때문에 이제 게시판은 로그인한 사람만
사용할 수 있고 게시글의 작성자와 댓글의 작성자는 당연히 현재 로그인한 사람을 기준으로
자동설정되어야 합니다.</p>

<p>이를 위해 bbs application의 <code class="highlighter-rouge">models.py</code>를 다음과 같이 수정하여 Foreign Key를
설정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">users.models</span> <span class="kn">import</span> <span class="n">Member</span>


<span class="k">class</span> <span class="nc">Board</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">b_title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">b_author</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Member</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">CASCADE</span><span class="p">)</span>
    <span class="n">b_content</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="c"># b_date = models.DateTimeField()</span>
    <span class="n">b_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c"># 자동갱신</span>
    <span class="n">b_comment_count</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">b_like_count</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">b_title</span>


<span class="k">class</span> <span class="nc">Comment</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">c_author</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Member</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">CASCADE</span><span class="p">)</span>
    <span class="n">c_content</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">board</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">CASCADE</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">c_content</span>


</code></pre></div></div>

<p>Database 변경사항을 반영하기 위해서 migration 초안을 생성하고 설정된 Schema를 
Database에 실제로 적용해야 합니다.</p>

<p>기존에 사용하고 있는 Database file과 migration 초안은 삭제하고 Database를 다시
생성합니다.</p>

<p>한가지 주의해야 할 점은 위의 코드를 사용하기 위해서는 <code class="highlighter-rouge">settings.py</code> 안에 위에서 언급한
<code class="highlighter-rouge">AUTH_USER_MODEL = 'users.Member'</code> 코드가 반드시 존재해야 한다는 것입니다.</p>

<p>마이그레이션 초안을 생성하기 위해서 다음과 같이 실행합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py makemigrations</strong></p>
</blockquote>

<p>설정된 Schema를 Database에 적용하기 위해서 다음과 같이 실행합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py migrate</strong></p>
</blockquote>

<p>관리자 page에 접속하기 위한 계정을 생성합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py createsuperuser</strong></p>
</blockquote>

<p>project가 정상적으로 생성되었는지 확인하기 위해 내장서버를 이용해 deploy합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py runserver</strong></p>
</blockquote>

<p>데이터베이스가 정상적으로 생성되었는지 확인하고 넘어가는게 좋습니다.
<a href="https://sqlitebrowser.org/" target="_blank">DB Browser for SQLite</a>와 같은
툴을 이용하면 쉽게 데이터베이스를 확인할 수 있습니다. 
MySQL같은 경우 <a href="https://www.toadworld.com/downloads" target="_blank">Toad for MySQL</a>을 사용하면 됩니다.</p>

<hr />

<p><strong class="subtitle2_fontAwesome">Admin Page 접속 확인</strong></p>

<p><code class="highlighter-rouge">http://localhost:8000/admin</code>으로 접속 후 관리자 계정으로 로그인</p>

<hr />

<p><strong class="subtitle2_fontAwesome">회원가입 및 로그인 기능 구현</strong></p>

<p>Project의 ROOT_URLCONF인 <code class="highlighter-rouge">urls.py</code>파일을 다음과 같이 수정하여 계층적으로 
URL을 관리하기 위한 설정을 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span> <span class="n">include</span>
<span class="kn">from</span> <span class="nn">django.views.generic.base</span> <span class="kn">import</span> <span class="n">TemplateView</span>
<span class="kn">from</span> <span class="nn">django.conf.urls.static</span> <span class="kn">import</span> <span class="n">static</span>
<span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">TemplateView</span><span class="o">.</span><span class="n">as_view</span><span class="p">(</span><span class="n">template_name</span><span class="o">=</span><span class="s">'index.html'</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s">'home'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'admin/'</span><span class="p">,</span> <span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'bbs/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'bbs.urls'</span><span class="p">)),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'users/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'users.urls'</span><span class="p">))</span>
<span class="p">]</span> <span class="o">+</span> <span class="n">static</span><span class="p">(</span><span class="n">settings</span><span class="o">.</span><span class="n">MEDIA_URL</span><span class="p">,</span> <span class="n">document_root</span><span class="o">=</span><span class="n">settings</span><span class="o">.</span><span class="n">MEDIA_ROOT</span><span class="p">)</span>

</code></pre></div></div>

<p><code class="highlighter-rouge">/users/</code> 경로로 들어오는 모든 request를 처리하기 위해서 
users application의 <code class="highlighter-rouge">urls.py</code>파일을 다음과 같이 작성합니다.</p>

<p>일단 urlpatterns을 정의하고 구현시 지금 당장 필요하지 않은 부분은 주석으로 처리하면서 
코드 작성을 진행하면 될 듯 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c"># users/urls.py</span>

<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'users'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'login/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">login</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'loginProcess/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">login_process</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login_process'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'signup/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">signup</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'signup'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'signupProcess/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">signup_process</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'signup_process'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'logout/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">logout</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'logout'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'update/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">update</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'update'</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>맨 처음 작업할 기능은 login, logout 입니다.</p>

<p>만약 로그인한 상태로 Home Page로 이동하게 되면 환영메시지를 출력하고 게시판 들어가기 버튼과 로그아웃 버튼을 활성화 시키고 로그인하지 않은
상태면 로그인이 필요하다는 메시지를 출력하고 로그인 버튼을 활성화시키면 될 듯 합니다. 따라서 우리의 Home Page는 다음과 같이 수정하면 됩니다.</p>

<p>다음은 수정된 <code class="highlighter-rouge">index.html</code> 내용입니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


<span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"ko"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>LectureSampleProject<span class="nt">&lt;/title&gt;</span>

  <span class="c">&lt;!-- Bootstrap core CSS --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span>
        <span class="na">href=</span><span class="s">"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"</span>
        <span class="na">integrity=</span><span class="s">"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"</span>
        <span class="na">crossorigin=</span><span class="s">"anonymous"</span><span class="nt">&gt;</span>

  <span class="c">&lt;!-- Custom styles for this template --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"/static/css/cover.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">"text-center"</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">"masthead mb-auto"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"inner"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"masthead-brand"</span><span class="nt">&gt;</span>Lecture Sample Project<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/header&gt;</span>

  <span class="nt">&lt;main</span> <span class="na">role=</span><span class="s">"main"</span> <span class="na">class=</span><span class="s">"inner cover"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"lead"</span><span class="nt">&gt;</span>
      {% if request.user.is_authenticated %}
      {{ request.user.username }}님 환영합니다.
      {% else %}
      로그인이 필요합니다.
      {% endif %}
    <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"lead"</span><span class="nt">&gt;</span>
      {% if request.user.is_authenticated %}
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"bbs/list/"</span> <span class="na">class=</span><span class="s">"btn btn-lg btn-primary"</span><span class="nt">&gt;</span>Enter BBS<span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"users/logout/"</span> <span class="na">class=</span><span class="s">"btn btn-lg btn-danger"</span><span class="nt">&gt;</span>Logout<span class="nt">&lt;/a&gt;</span>
      {% else %}
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"users/login/"</span> <span class="na">class=</span><span class="s">"btn btn-lg btn-warning"</span><span class="nt">&gt;</span>Login<span class="nt">&lt;/a&gt;</span>
      {% endif %}
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/main&gt;</span>

  <span class="nt">&lt;footer</span> <span class="na">class=</span><span class="s">"mastfoot mt-auto"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"inner"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p&gt;</span>Copyright 2020<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/footer&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>




</code></pre></div></div>

<p>간단한 기능인 logout 기능부터 살펴보도록 하겠습니다. 먼저 users application의 <code class="highlighter-rouge">urls.py</code> 파일을 수정해야 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'users'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'login/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">login</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login'</span><span class="p">),</span>
    <span class="c"># path('loginProcess/', views.login_process, name='login_process'),</span>
    <span class="c"># path('signup/', views.signup, name='signup'),</span>
    <span class="c"># path('signupProcess/', views.signup_process, name='signup_process'),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'logout/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">logout</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'logout'</span><span class="p">),</span>
    <span class="c"># path('update/', views.update, name='update'),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>users application의 <code class="highlighter-rouge">views.py</code> 파일을 수정해야 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span><span class="p">,</span> \
    <span class="n">login</span> <span class="k">as</span> <span class="n">django_login</span><span class="p">,</span> \
    <span class="n">logout</span> <span class="k">as</span> <span class="n">django_logout</span>
<span class="kn">from</span> <span class="nn">.forms</span> <span class="kn">import</span> <span class="n">LoginForm</span>


<span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">login_form</span> <span class="o">=</span> <span class="n">LoginForm</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'users/login.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'login_form'</span><span class="p">:</span> <span class="n">login_form</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">logout</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">django_logout</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'home'</span><span class="p">)</span>

</code></pre></div></div>

<p>로그인이 되어 있는 경우 우리 Home Page에서 <code class="highlighter-rouge">Enter BBS</code> 버튼을 클릭하면 게시판의
list를 보여주는 화면으로 이동하게 되는데 <code class="highlighter-rouge">/bbs/list/</code>로 이동(편의상 이동이란 표현을 사용하겠습니다.)할 때 
로그인이 되어 있으면 list를 출력하지만 그렇지 않은 경우 login 화면으로 이동하면 될 듯 합니다.</p>

<p>정상적인 형태로 link를 타고 오는게 아니라 직접 게시판 url을 입력할 경우를 대비해서 다음과 같이 처리합니다.</p>

<p>bbs application의 <code class="highlighter-rouge">views.py</code> 안의 <code class="highlighter-rouge">b_list</code> 함수를 다음과 같이 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">b_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>

    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">is_authenticated</span><span class="p">:</span>
        <span class="n">posts</span> <span class="o">=</span> <span class="n">Board</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">'-id'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/list.html'</span><span class="p">,</span> <span class="p">{</span>
            <span class="s">'posts'</span><span class="p">:</span> <span class="n">posts</span>
        <span class="p">})</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">login_form</span> <span class="o">=</span> <span class="n">LoginForm</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'users/login.html'</span><span class="p">,</span> <span class="p">{</span>
            <span class="s">'login_form'</span><span class="p">:</span> <span class="n">login_form</span>
        <span class="p">})</span>

</code></pre></div></div>

<p>users application의 template으로 <code class="highlighter-rouge">login.html</code> 파일을 생성해야 합니다. 이 파일의 내용은 bootstrap의 example을
이용하겠습니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


{% extends 'base.html' %}
{% load bootstrap4 %}

{% block html_header %}
<span class="nt">&lt;style&gt;</span>
  <span class="nc">.bd-placeholder-img</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">1.125rem</span><span class="p">;</span>
    <span class="py">text-anchor</span><span class="p">:</span> <span class="nb">middle</span><span class="p">;</span>
    <span class="nl">-webkit-user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
    <span class="nl">-moz-user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
    <span class="py">user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">768px</span><span class="p">)</span> <span class="p">{</span>
    <span class="nc">.bd-placeholder-img-lg</span> <span class="p">{</span>
      <span class="nl">font-size</span><span class="p">:</span> <span class="m">3.5rem</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>

<span class="c">&lt;!-- Custom styles for this template --&gt;</span>
<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"/static/css/signin.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span><span class="nt">&gt;</span>
{% endblock %}

{% block html_body %}

<span class="nt">&lt;main</span> <span class="na">class=</span><span class="s">"form-signin"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/users/loginProcess/"</span>
        <span class="na">method=</span><span class="s">"POST"</span><span class="nt">&gt;</span>
    {% csrf_token %}
    <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"h3 mb-3 fw-normal"</span><span class="nt">&gt;</span>로그인하세요<span class="nt">&lt;/h1&gt;</span>

    {% bootstrap_form login_form %}

    <span class="nt">&lt;br&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"w-100 btn btn-lg btn-primary"</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>로그인<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"mt-5 mb-3 text-muted"</span><span class="nt">&gt;</span><span class="ni">&amp;copy;</span> 2017–2021<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/main&gt;</span>

{% endblock %}




</code></pre></div></div>

<p>로그인 버튼을 클릭하면 로그인 처리를 수행해야 하기 때문에 <code class="highlighter-rouge">urls.py</code>와 <code class="highlighter-rouge">views.py</code> 파일을 수정합니다.</p>

<p>아래의 내용은 <code class="highlighter-rouge">urls.py</code> 입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'users'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'login/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">login</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'loginProcess/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">login_process</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login_process'</span><span class="p">),</span>
    <span class="c"># path('signup/', views.signup, name='signup'),</span>
    <span class="c"># path('signupProcess/', views.signup_process, name='signup_process'),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'logout/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">logout</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'logout'</span><span class="p">),</span>
    <span class="c"># path('update/', views.update, name='update'),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>아래의 내용은 <code class="highlighter-rouge">views.py</code> 입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span><span class="p">,</span> \
    <span class="n">login</span> <span class="k">as</span> <span class="n">django_login</span><span class="p">,</span> \
    <span class="n">logout</span> <span class="k">as</span> <span class="n">django_logout</span>
<span class="kn">from</span> <span class="nn">.forms</span> <span class="kn">import</span> <span class="n">LoginForm</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>


<span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">login_form</span> <span class="o">=</span> <span class="n">LoginForm</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'users/login.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'login_form'</span><span class="p">:</span> <span class="n">login_form</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">logout</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">django_logout</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'home'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">login_process</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>

        <span class="n">login_form</span> <span class="o">=</span> <span class="n">LoginForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>

        <span class="n">username</span> <span class="o">=</span> <span class="n">login_form</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s">'username'</span><span class="p">]</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">login_form</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="s">'password'</span><span class="p">]</span>

        <span class="c"># 가져온 username과 password에 해당하는 User가 있는지 판단</span>
        <span class="c"># 존재할경우 user변수에는 User인스턴스가 할당되며,</span>
        <span class="c"># 존재하지 않으면 None이 할당된다</span>
        <span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">django_login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'home'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">'로그인 실패. 다시 시도 해보세요.'</span><span class="p">)</span>


</code></pre></div></div>

<p>여기까지 진행되면 기본적인 로그인, 로그아웃 처리가 완성됩니다. 이제 회원가입을 처리해보도록 하겠습니다. 타 사이트에서 인증받을 경우
우리 사이트에서 자동으로 회원가입이 되도록 하는 기능을 추후에 프로젝트 등에서 추가해보시기 바랍니다. 여기서는 기본적인 데이터를
입력받아서 회원가입하는 형태로 진행하겠습니다.</p>

<p>회원가입 링크는 Home Page에 만들도록 하겠습니다. <code class="highlighter-rouge">index.html</code>을 간단히 수정합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


<span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"ko"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>LectureSampleProject<span class="nt">&lt;/title&gt;</span>

  <span class="c">&lt;!-- Bootstrap core CSS --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span>
        <span class="na">href=</span><span class="s">"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"</span>
        <span class="na">integrity=</span><span class="s">"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"</span>
        <span class="na">crossorigin=</span><span class="s">"anonymous"</span><span class="nt">&gt;</span>

  <span class="c">&lt;!-- Custom styles for this template --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"/static/css/cover.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">"text-center"</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">"masthead mb-auto"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"inner"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"masthead-brand"</span><span class="nt">&gt;</span>Lecture Sample Project<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/header&gt;</span>

  <span class="nt">&lt;main</span> <span class="na">role=</span><span class="s">"main"</span> <span class="na">class=</span><span class="s">"inner cover"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"lead"</span><span class="nt">&gt;</span>
      {% if request.user.is_authenticated %}
      {{ request.user.username }}님 환영합니다.
      {% else %}
      로그인이 필요합니다.
      {% endif %}
    <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"lead"</span><span class="nt">&gt;</span>
      {% if request.user.is_authenticated %}
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"bbs/list/"</span> <span class="na">class=</span><span class="s">"btn btn-lg btn-primary"</span><span class="nt">&gt;</span>Enter BBS<span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"users/logout/"</span> <span class="na">class=</span><span class="s">"btn btn-lg btn-danger"</span><span class="nt">&gt;</span>Logout<span class="nt">&lt;/a&gt;</span>
      {% else %}
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"users/login/"</span> <span class="na">class=</span><span class="s">"btn btn-lg btn-warning"</span><span class="nt">&gt;</span>Login<span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"users/signup/"</span> <span class="na">class=</span><span class="s">"btn btn-lg btn-success"</span><span class="nt">&gt;</span>회원가입<span class="nt">&lt;/a&gt;</span>
      {% endif %}
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/main&gt;</span>

  <span class="nt">&lt;footer</span> <span class="na">class=</span><span class="s">"mastfoot mt-auto"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"inner"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p&gt;</span>Copyright 2020<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/footer&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>




</code></pre></div></div>

<p><code class="highlighter-rouge">urls.py</code>를 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'users'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'login/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">login</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'loginProcess/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">login_process</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login_process'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'signup/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">signup</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'signup'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'signupProcess/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">signup_process</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'signup_process'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'logout/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">logout</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'logout'</span><span class="p">),</span>
    <span class="c"># path('update/', views.update, name='update'),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>이제 회원가입을 위한 ModelForm을 생성하러 <code class="highlighter-rouge">forms.py</code> 파일을 수정해야 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Member</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth.forms</span> <span class="kn">import</span> <span class="n">UserCreationForm</span>


<span class="k">class</span> <span class="nc">MemberForm</span><span class="p">(</span><span class="n">UserCreationForm</span><span class="p">):</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">'username'</span><span class="p">,</span> <span class="s">'email'</span><span class="p">,</span> <span class="s">'mobile'</span><span class="p">,</span> <span class="s">'password1'</span><span class="p">,</span> <span class="s">'password2'</span><span class="p">]</span>


<span class="k">class</span> <span class="nc">LoginForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">ModelForm</span><span class="p">):</span>

    <span class="n">password</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span>
        <span class="n">label</span><span class="o">=</span><span class="s">'Password'</span><span class="p">,</span>
        <span class="n">widget</span><span class="o">=</span><span class="n">forms</span><span class="o">.</span><span class="n">PasswordInput</span><span class="p">(</span>
            <span class="n">attrs</span><span class="o">=</span><span class="p">{</span>
                <span class="s">'class'</span><span class="p">:</span> <span class="s">'form-control'</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">)</span>
    <span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">'username'</span><span class="p">,</span> <span class="s">'password'</span><span class="p">]</span>


</code></pre></div></div>

<p><code class="highlighter-rouge">views.py</code> 파일을 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">signup</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">member_form</span> <span class="o">=</span> <span class="n">MemberForm</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'users/signup.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'member_form'</span><span class="p">:</span> <span class="n">member_form</span>
    <span class="p">})</span>

</code></pre></div></div>

<p>회원가입을 위한 template인 <code class="highlighter-rouge">signup.html</code>을 작성합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


{% extends 'base.html' %}
{% load bootstrap4 %}

{% block html_header %}
<span class="nt">&lt;style&gt;</span>
  <span class="nc">.bd-placeholder-img</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">1.125rem</span><span class="p">;</span>
    <span class="py">text-anchor</span><span class="p">:</span> <span class="nb">middle</span><span class="p">;</span>
    <span class="nl">-webkit-user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
    <span class="nl">-moz-user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
    <span class="py">user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">768px</span><span class="p">)</span> <span class="p">{</span>
    <span class="nc">.bd-placeholder-img-lg</span> <span class="p">{</span>
      <span class="nl">font-size</span><span class="p">:</span> <span class="m">3.5rem</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>

<span class="c">&lt;!-- Custom styles for this template --&gt;</span>
<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"/static/css/signin.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span><span class="nt">&gt;</span>
{% endblock %}

{% block html_body %}

<span class="nt">&lt;main</span> <span class="na">class=</span><span class="s">"form-signin"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/users/signupProcess/"</span>
        <span class="na">method=</span><span class="s">"POST"</span><span class="nt">&gt;</span>
    {% csrf_token %}
    <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"h3 mb-3 fw-normal"</span><span class="nt">&gt;</span>회원가입<span class="nt">&lt;/h1&gt;</span>

    {% bootstrap_form member_form %}

    <span class="nt">&lt;br&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"w-100 btn btn-lg btn-success"</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>회원가입<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"mt-5 mb-3 text-muted"</span><span class="nt">&gt;</span><span class="ni">&amp;copy;</span> 2017–2021<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/main&gt;</span>

{% endblock %}




</code></pre></div></div>

<p>이제 실제 회원가입 기능을 하면 <code class="highlighter-rouge">views.py</code>의 함수를 살펴보도록 하겠습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">signup_process</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">"POST"</span><span class="p">:</span>
        <span class="n">member_form</span> <span class="o">=</span> <span class="n">MemberForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">member_form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">new_user</span> <span class="o">=</span> <span class="n">Member</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create_user</span><span class="p">(</span><span class="n">member_form</span><span class="o">.</span><span class="n">cleaned_data</span><span class="p">[</span><span class="s">"username"</span><span class="p">],</span>
                                                  <span class="n">email</span><span class="o">=</span><span class="n">member_form</span><span class="o">.</span><span class="n">cleaned_data</span><span class="p">[</span><span class="s">'email'</span><span class="p">],</span>
                                                  <span class="n">password</span><span class="o">=</span><span class="n">member_form</span><span class="o">.</span><span class="n">cleaned_data</span><span class="p">[</span><span class="s">'password1'</span><span class="p">],</span>
                                                  <span class="n">mobile</span><span class="o">=</span><span class="n">member_form</span><span class="o">.</span><span class="n">cleaned_data</span><span class="p">[</span><span class="s">'mobile'</span><span class="p">])</span>
            <span class="n">django_login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">new_user</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'home'</span><span class="p">)</span>

</code></pre></div></div>

<p>여기까지 작성하면 회원가입 기능까지 동작하게 됩니다. 현재 회원가입, 로그인, 로그아웃 기능까지 구현했습니다. 회원정보 상세보기와 수정은
배운내용을 기반으로 개인적으로 작성해보세요. 지금까지의 내용을 잘 따라오셨으면 어떻게 해야 할지 감(?)이 오실거라 생각됩니다.</p>

<p>마지막 단계가 남았습니다. 글을 쓸때 현재 로그인 한 사람의 이름으로 글 작성자가 자동으로 설정되어야 합니다. 또한 
글 삭제와 수정 역시 본인이 작성한 글에 대해서만 기능이 동작하도록 해야 합니다.</p>

<hr />

<p><strong class="subtitle2_fontAwesome">게시판 기능 수정(새글 작성)</strong></p>

<p>게시판의 새글 작성 기능부터 손봐야 할 듯 합니다. 현재까지 구현된 내용으로 실행하면 새글 작성 클릭 시 author 부분이 Foreign key로
설정되어 있기 때문에 author를 선택할 수 있는 select box로 표현될 것입니다. 이 부분부터 수정하고 가도록 하죠. 그러면
새글 작성 화면에서 현재 로그인한 사람의 username으로 author부분을 고정시키면 될 듯 합니다.</p>

<p>구현 방법은 여러가지가 있을 수 있는데 여기서는 너무 어렵지 않게 우리가 배운 jQuery를 활용하는 쪽으로 진행하겠습니다. jQuery는
보안상 약간 우려되는 부분이 있지만 코드가 직관적이기 때문에 이해하는데 어렵지는 않을 듯 합니다.</p>

<p>먼저 <code class="highlighter-rouge">views.py</code> 파일부터 손봐야 할 듯 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">b_create</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c"># POST 방식</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="c"># ModelForm을 사용하지 않으면</span>
        <span class="c"># class의 instance를 만들어서 save() 호출</span>
        <span class="c"># board = Board()</span>
        <span class="c"># board.b_title = request.POST['b_title']</span>
        <span class="c"># board.save()</span>

        <span class="n">board_form</span> <span class="o">=</span> <span class="n">BoardForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">board_form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">new_post</span> <span class="o">=</span> <span class="n">board_form</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">commit</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="c"># 필요한 경우 field에 값을 수동으로 설정할 수 있다.</span>
            <span class="c"># 예) new_post.b_like_count = 100</span>
            <span class="n">new_post</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'bbs:b_list'</span><span class="p">)</span>

    <span class="c"># GET 방식</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">member</span> <span class="o">=</span> <span class="n">Member</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">username</span><span class="p">)</span>
        <span class="n">board_form</span> <span class="o">=</span> <span class="n">BoardForm</span><span class="p">(</span><span class="n">initial</span><span class="o">=</span><span class="p">{</span><span class="s">'b_author'</span><span class="p">:</span> <span class="n">member</span><span class="p">})</span>
        <span class="n">board_form</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="s">'b_author'</span><span class="p">]</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
            <span class="s">'disabled'</span><span class="p">:</span> <span class="s">'disabled'</span>
        <span class="p">})</span>
        <span class="c"># 로그인한 사람의 username으로 author부분을 설정한 후 수정할 수 없도록</span>
        <span class="c"># disabled로 설정합니다.</span>
        <span class="c"># 단, disabled로 설정된 field는 submit이 되지 않기 때문에 jQuery를 이용해</span>
        <span class="c"># submit하기 전에 disabled를 해제하고 submit하는 방식으로 우회합니다.</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/create.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_form'</span><span class="p">:</span> <span class="n">board_form</span>
    <span class="p">})</span>

</code></pre></div></div>

<p>그 다음 수정해야 할 파일은 <code class="highlighter-rouge">create.html</code> 입니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


{% extends 'base.html' %}
{% load bootstrap4 %}
{% block html_body %}

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/menu_btn.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>새글 작성<span class="nt">&lt;/h1&gt;</span>

  <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    {% csrf_token %}
    {# {{ board_form }} #}
    {% bootstrap_form board_form %}
    <span class="nt">&lt;br&gt;</span>
    {#        기존의 submit button 방식으로는 처리하기가 좀 복잡해서 #}
    {#        간단하게 처리할 수 있는 jQuery방식으로 우회하자 #}
    {#        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="err">#}</span> 
    <span class="err">{#</span>                <span class="na">class=</span><span class="s">"btn btn-primary"</span><span class="nt">&gt;</span>등록<span class="nt">&lt;/button&gt;</span> #}
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
            <span class="na">class=</span><span class="s">"btn btn-primary"</span>
            <span class="na">id=</span><span class="s">"post_create_btn"</span><span class="nt">&gt;</span>등록<span class="nt">&lt;/button&gt;</span>

    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
            <span class="na">class=</span><span class="s">"btn btn-secondary"</span>
            <span class="na">id=</span><span class="s">"board_list_btn"</span><span class="nt">&gt;</span>리스트로 돌아가기<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/div&gt;</span>

{% endblock %}



</code></pre></div></div>

<p>jQuery를 이용하여 submit 처리를 해야 하기 때문에 <code class="highlighter-rouge">menu_btn.js</code> 파일을 수정합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>

  <span class="c1">// 새글쓰기 버튼 클릭시</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">'#new_post_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="s1">'/bbs/create/'</span>
  <span class="p">})</span>

  <span class="c1">// 새글 등록 버튼 클릭시(실제 새글을 저장하기 위한 submit을 수행할 때)</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">'#post_create_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#id_b_author'</span><span class="p">).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s1">'disabled'</span><span class="p">)</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'form'</span><span class="p">).</span><span class="nx">submit</span><span class="p">()</span>
  <span class="p">})</span>

  <span class="c1">// 나머지 부분은 동일</span>
  
<span class="p">})</span>

</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">게시판 기능 수정(상세보기)</strong></p>

<p>이번에는 게시글 상세보기 화면을 수정하도록 하죠.</p>

<p>제일 먼저 수정해야 할 파일은 <code class="highlighter-rouge">views.py</code> 입니다. 해당 게시글이 로그인한 사람이 쓴 글인지를 
확인해 상세보기 화면에 필요한 정보를 넘겨줘야 하기 때문입니다. 또한 Foreign key 때문에 글 작성자
부분에 id가 표현되는데 이 또한 수정해야 합니다. 댓글에 대한 처리는 하지 않았습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">b_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">board_id</span><span class="p">):</span>

    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">board_id</span><span class="p">)</span>

    <span class="n">is_author</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="n">post</span><span class="o">.</span><span class="n">b_author</span><span class="p">)</span> <span class="o">==</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">username</span><span class="p">:</span>
        <span class="n">is_author</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">member</span> <span class="o">=</span> <span class="n">Member</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">username</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">member</span> <span class="o">=</span> <span class="n">Member</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">post</span><span class="o">.</span><span class="n">b_author</span><span class="p">)</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">,</span>
                                        <span class="n">initial</span><span class="o">=</span><span class="p">{</span><span class="s">'b_author'</span><span class="p">:</span> <span class="n">member</span><span class="p">})</span>

    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>

    <span class="c"># comment 정보도 가져와야 한다.</span>
    <span class="n">comments</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">comment_set</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">'-id'</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span><span class="p">,</span>
        <span class="s">'comments'</span><span class="p">:</span> <span class="n">comments</span><span class="p">,</span>
        <span class="s">'is_author'</span><span class="p">:</span> <span class="n">is_author</span>
    <span class="p">})</span>

</code></pre></div></div>

<p><code class="highlighter-rouge">forms.py</code> 파일을 살짝 수정해야 합니다. <code class="highlighter-rouge">b_author</code>는 Foreign key로 설정되어 있고 추후에 disabled로 
설정해야 하기 때문에 코드를 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">class</span> <span class="nc">BoardDetailForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">ModelForm</span><span class="p">):</span>

    <span class="c"># 각 field를 세부적으로 조정하려면 다음과 같이 widget을 이용해야 한다.</span>
    <span class="c"># b_title = forms.CharField(</span>
    <span class="c">#     label='제목',</span>
    <span class="c">#     widget=forms.TextInput(</span>
    <span class="c">#         attrs={</span>
    <span class="c">#             'class': 'form-control',</span>
    <span class="c">#         }</span>
    <span class="c">#     )</span>
    <span class="c"># )</span>
    <span class="n">b_title</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'글제목'</span><span class="p">)</span>
    <span class="c"># b_author는 일반 CharField로 설정하면 안됩니다.</span>
    <span class="c"># b_author = forms.CharField(label='글작성자')</span>
    <span class="n">b_content</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'글내용'</span><span class="p">)</span>
    <span class="n">b_comment_count</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'댓글수'</span><span class="p">)</span>
    <span class="n">b_like_count</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'좋아요'</span><span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Board</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>

    <span class="k">def</span> <span class="nf">show_board_detail</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_all_fields_from_form</span><span class="p">(</span><span class="n">BoardDetailForm</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">fields</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="n">field</span><span class="p">]</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
                <span class="s">'readonly'</span><span class="p">:</span> <span class="s">'readonly'</span>
            <span class="p">})</span>

       <span class="c"># 작성자는 수정이 불가능해야 합니다. </span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="s">'b_author'</span><span class="p">]</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
            <span class="s">'disabled'</span><span class="p">:</span> <span class="s">'disabled'</span>
        <span class="p">})</span>

    <span class="k">def</span> <span class="nf">show_board_update</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    
        <span class="c"># 작성자는 수정이 불가능해야 합니다.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="s">'b_author'</span><span class="p">]</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
            <span class="s">'disabled'</span><span class="p">:</span> <span class="s">'disabled'</span>
        <span class="p">})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="s">'b_like_count'</span><span class="p">]</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
            <span class="s">'readonly'</span><span class="p">:</span> <span class="s">'readonly'</span>
        <span class="p">})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="s">'b_comment_count'</span><span class="p">]</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
            <span class="s">'readonly'</span><span class="p">:</span> <span class="s">'readonly'</span>
        <span class="p">})</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">get_all_fields_from_form</span><span class="p">(</span><span class="n">instance</span><span class="p">):</span>

        <span class="n">fields</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">base_fields</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">declared_fields</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">field</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">fields</span><span class="p">:</span>
                <span class="n">fields</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">field</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">fields</span>


</code></pre></div></div>

<p>다음은 <code class="highlighter-rouge">detail.html</code> 파일입니다. 자신이 작성한 글에 대해서는 수정 버튼과 삭제 버튼이 활성화 되고 좋아요 버튼은
비활성화 시킵니다. 반대로 자신이 작성한 글이 아닌경우 좋아요 버튼만 활성화 시키는 처리를 하면 될 듯 합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


{% extends 'base.html' %}
{% load bootstrap4 %}
{% block html_body %}

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/menu_btn.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>글 상세보기<span class="nt">&lt;/h1&gt;</span>

  번호 : <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"board_id"</span><span class="nt">&gt;</span>{{ board_detail_form.initial.id }}<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    {% csrf_token %}
    {% bootstrap_form board_detail_form %}
    <span class="nt">&lt;br&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-success"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_list_btn"</span><span class="nt">&gt;</span>리스트로 돌아가기<span class="nt">&lt;/button&gt;</span>
  {% if is_author %}
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-primary"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_update_btn"</span><span class="nt">&gt;</span>수정<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-danger"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_delete_btn"</span><span class="nt">&gt;</span>삭제<span class="nt">&lt;/button&gt;</span>
  {% else %}
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-warning"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_like_btn"</span><span class="nt">&gt;</span>좋아요<span class="nt">&lt;/button&gt;</span>
  {% endif %}

<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;br&gt;&lt;br&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;h3&gt;</span>댓글<span class="nt">&lt;/h3&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"c_name"</span><span class="nt">&gt;</span>이름<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span>
           <span class="na">class=</span><span class="s">"form-control"</span>
           <span class="na">id=</span><span class="s">"c_name"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"c_content"</span><span class="nt">&gt;</span>내용<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span>
           <span class="na">class=</span><span class="s">"form-control"</span>
           <span class="na">id=</span><span class="s">"c_content"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;br&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
            <span class="na">class=</span><span class="s">"btn btn-info"</span>
            <span class="na">id=</span><span class="s">"comment_create_btn"</span><span class="nt">&gt;</span>등록<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">"table table-hover"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;thead</span> <span class="na">class=</span><span class="s">"thead-dark"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>글작성자<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>글내용<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>삭제<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/thead&gt;</span>
    <span class="nt">&lt;tbody</span> <span class="na">id=</span><span class="s">"comment_body"</span><span class="nt">&gt;</span>
    {% for comment in comments %}
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td&gt;</span>{{ comment.c_author }}<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td&gt;</span>{{ comment.c_content }}<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
                <span class="na">class=</span><span class="s">"btn btn-danger"</span>
                <span class="na">data-comment_id=</span><span class="s">"{{ comment.id }}"</span>
                <span class="na">id=</span><span class="s">"comment_delete_btn"</span><span class="nt">&gt;</span>삭제<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    {% endfor %}
    <span class="nt">&lt;/tbody&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;br&gt;&lt;br&gt;&lt;br&gt;</span>
{% endblock %}



</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">게시판 기능 수정(게시글 수정)</strong></p>

<p>게시글 상세보기에서 수정버튼을 클릭하면 글 내용을 수정할 수 있는 화면으로 전환됩니다. 이때 
글 작성자는 고정되어야 하며 글 제목과 내용만 수정될 수 있도록 처리해야 합니다.</p>

<p>먼저 수정해야 할 파일은 <code class="highlighter-rouge">views.py</code> 파일 입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">b_update</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'board_id'</span><span class="p">])</span>

    <span class="n">member</span> <span class="o">=</span> <span class="n">Member</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">username</span><span class="p">)</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">,</span>
                                        <span class="n">initial</span><span class="o">=</span><span class="p">{</span><span class="s">'b_author'</span><span class="p">:</span> <span class="n">member</span><span class="p">})</span>
    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_update</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/update.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_update_process</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">board_id</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">board_id</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">,</span> <span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>

        <span class="k">print</span><span class="p">(</span><span class="n">board_detail_form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">())</span>

        <span class="k">if</span> <span class="n">board_detail_form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>

            <span class="n">board_detail_form</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
            <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
                <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span><span class="p">,</span>
                <span class="s">'is_author'</span><span class="p">:</span> <span class="bp">True</span>
            <span class="p">})</span>

</code></pre></div></div>

<p><code class="highlighter-rouge">update.html</code> 파일도 약간 손봐야 합니다. submit button을 jQuery를 이용해서 처리합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


{% extends 'base.html' %}
{% load bootstrap4 %}
{% block html_body %}

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/menu_btn.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Post Update<span class="nt">&lt;/h1&gt;</span>

  번호 : {{ board_detail_form.initial.id }}
  <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">'{% url '</span><span class="na">bbs:b_update_process</span><span class="err">'</span> <span class="na">board_detail_form</span><span class="err">.</span><span class="na">initial</span><span class="err">.</span><span class="na">id</span> <span class="err">%}'</span>
  <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
  {% csrf_token %}
  {# {{ board_detail_form }} #}
  {% bootstrap_form board_detail_form %}
  <span class="nt">&lt;br&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-primary"</span>
          <span class="na">id=</span><span class="s">"board_list_btn"</span><span class="nt">&gt;</span>리스트로 돌아가기<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-primary"</span>
          <span class="na">id=</span><span class="s">"post_update_btn"</span><span class="nt">&gt;</span>수정적용<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/form&gt;</span>

<span class="nt">&lt;/div&gt;</span>

{% endblock %}



</code></pre></div></div>

<p><code class="highlighter-rouge">menu_btn.js</code> 파일도 약간 수정해야 합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="c1">// 수정버튼 클릭시</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">'#board_update_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">query_string</span> <span class="o">=</span> <span class="s1">'?board_id='</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'data-board_id'</span><span class="p">)</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s1">'/bbs/update'</span> <span class="o">+</span> <span class="nx">query_string</span>
<span class="p">})</span>

<span class="c1">// 수정적용 버튼 클릭시(실제 수정된 글을 저장하기 위한 submit을 수행할 때)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">'#post_update_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">'#id_b_author'</span><span class="p">).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s1">'disabled'</span><span class="p">)</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">'form'</span><span class="p">).</span><span class="nx">submit</span><span class="p">()</span>
<span class="p">})</span>


</code></pre></div></div>

<hr />

<p>마지막은 거의 코드 위주로 진행이 됬지만 천천히 살펴보시길 바랍니다. 댓글 역시 자신이 작성한 댓글만 삭제할 수 있도록
처리해야 합니다. 이 구현은 여러분들이 직접 한번 해 보세요!</p>

<p>아래의 링크를 누르면 여기까지 진행한 프로젝트를 다운받으실 수 있습니다.</p>

<p><a href="/assets/downloads/LectureSampleProject.zip" target="_blank">LectureSampleProject</a></p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Python 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.python.org/" target="_blank">Python Official HomePage</a></li>
    <li>점프 투 파이썬 - 이지스 퍼블리싱</li>
    <li>전문가를 위한 파이썬(Fluent Python) - 한빛미디어</li>
    <li>파이썬 웹 프로그래밍 - 한빛미디어</li>
    <li>이미지 출처 : <a href="http://www.freepik.com" target="_blank">Designed by rawpixel.com / Freepik</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Python Django 웹 프레임워크(7) - Lecture Sample project 개발(1)</title>
	  <link>https://moon9342.github.io/python-lecture-python-django-lecture-sample-project_1</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-05-08T01:40:00+09:00</pubDate>
	  <guid>https://moon9342.github.io/python-lecture-python-django-lecture-sample-project_1</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Python 기초강의는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./python-lecture-python-introduction">Python 기초강의(1) - Introduction</a></li>
    <li><a href="./python-lecture-python-basic">Python 기초강의(2) - Python 기본</a></li>
    <li><a href="./python-lecture-python-control-statement">Python 기초강의(3) - Python 제어문</a></li>
    <li><a href="./python-lecture-python-function">Python 기초강의(4) - Python function</a></li>
    <li><a href="./python-lecture-python-program-exercise-1">Python 기초강의(5) - Python 연습문제(1)</a></li>
    <li><a href="./python-lecture-python-OOP">Python 기초강의(6) - Python 객체지향</a></li>
    <li><a href="./python-lecture-python-magic-function">Python 기초강의(7) - Python Magic Function</a></li>
    <li><a href="./python-lecture-python-first-class">Python 기초강의(8) - Python First Class</a></li>
    <li><a href="./python-lecture-python-closure">Python 기초강의(9) - Python Closure</a></li>
    <li><a href="./python-lecture-python-decorator">Python 기초강의(10) - Python Decorator</a></li>
    <li><a href="./python-lecture-python-generator">Python 기초강의(11) - Python Generator</a></li>
    <li><a href="./python-lecture-python-module">Python 기초강의(12) - Python Module</a></li>
    <li><a href="./python-lecture-python-exception">Python 기초강의(13) - Python Exception &amp; File</a></li>
    <li><a href="./python-lecture-python-oop-exercise">Python 기초강의(14) - Python 연습문제(2)</a></li>
    <li><a href="./python-lecture-python-web-basic-jquery">Web basic &amp; jQuery(Front End Web Application)</a></li>
    <li><a href="./python-lecture-python-django-introduction">Python Django 웹 프레임워크(1) - introduction</a></li>
    <li><a href="./python-lecture-python-django-poll-project-1">Python Django 웹 프레임워크(2) - Poll project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-2">Python Django 웹 프레임워크(3) - Poll project 개발(2)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-3">Python Django 웹 프레임워크(4) - Poll project 개발(3)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-4">Python Django 웹 프레임워크(5) - Poll project 개발(4)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-5">Python Django 웹 프레임워크(6) - Poll project 개발(5)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_1">Python Django 웹 프레임워크(7) - LectureSample project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_2">Python Django 웹 프레임워크(8) - LectureSample project 개발(2)</a></li>


</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Lecture Sample project 개발(1)</strong></p>

<p>앞서 살펴본 Poll Project의 내용을 기반으로 이번에는 다음의 내용을 포함하는 
Lecture Sample Project를 구현해보도록 하겠습니다.</p>
<ul>
  <li>ModelForm을 이용한 BBS(게시판) CRUD 구현(댓글기능은 AJAX로 구현)</li>
  <li>Bootstrap 적용</li>
</ul>

<p><strong class="subtitle2_fontAwesome">project 생성</strong></p>

<p>새로운 project lecture를 생성합니다.</p>
<blockquote>
  <p><strong>C:/python-Django&gt; django-admin startproject lecture</strong></p>
</blockquote>

<p>project 설정과 application을 모두 포함하는 폴더 이름을 LectureSampleProject로 변경합니다.</p>
<blockquote>
  <p><strong>C:/python-Django&gt; move lecture LectureSampleProject</strong></p>
</blockquote>

<p>working directory를 LectureSampleProject 폴더로 변경합니다.</p>
<blockquote>
  <p><strong>C:/python-Django&gt; cd LectureSampleProject</strong></p>
</blockquote>

<p>bbs application을 생성합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py startapp bbs</strong></p>
</blockquote>

<p>이후부터는 PyCharm을 이용해 작업을 진행합니다.</p>

<p><strong class="subtitle2_fontAwesome">project 환경설정</strong></p>

<p>환경설정을 위해 project 폴더의 <code class="highlighter-rouge">settings.py</code>파일을 수정합니다. 
기본적인 <code class="highlighter-rouge">DEBUG=TRUE</code> 설정에 따른 <code class="highlighter-rouge">ALLOWED_HOSTS</code>에 대한 내용을
다음과 같이 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">ALLOWED_HOSTS</span> <span class="o">=</span> <span class="p">[</span><span class="s">'localhost'</span><span class="p">,</span> <span class="s">'127.0.0.1'</span><span class="p">]</span>

</code></pre></div></div>

<p><code class="highlighter-rouge">INSTALLED_APPS</code> 부분에 <code class="highlighter-rouge">bbs</code> application을 등록합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
    <span class="s">'bbs.apps.BbsConfig'</span>
<span class="p">]</span>

</code></pre></div></div>

<p>최상위 project 폴더안에 <code class="highlighter-rouge">templates</code> 폴더를 생성한 후 
<code class="highlighter-rouge">TEMPLATES</code> 부분을 수정하여 <code class="highlighter-rouge">templates</code> 폴더를 추가로 설정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">TEMPLATES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s">'BACKEND'</span><span class="p">:</span> <span class="s">'django.template.backends.django.DjangoTemplates'</span><span class="p">,</span>
        <span class="s">'DIRS'</span><span class="p">:</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">'templates'</span><span class="p">)],</span>
        <span class="s">'APP_DIRS'</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
        <span class="s">'OPTIONS'</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">'context_processors'</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">'django.template.context_processors.debug'</span><span class="p">,</span>
                <span class="s">'django.template.context_processors.request'</span><span class="p">,</span>
                <span class="s">'django.contrib.auth.context_processors.auth'</span><span class="p">,</span>
                <span class="s">'django.contrib.messages.context_processors.messages'</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

</code></pre></div></div>

<p>Database는 기본으로 제공되는  <code class="highlighter-rouge">slqlite3</code>를 사용합니다. 이 경우 설정을 변경할 
필요없습니다. 하지만 MySQL과 같은 외부 Database를 사용할 경우 설정을 다음과 
같이 변경해야 합니다.</p>

<p>mysql module을 설치해야 하며 외부 데이터베이스 설정 역시 아래의 설정대로
처리해야 합니다. (pip install mysqlclient)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'default'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'ENGINE'</span><span class="p">:</span> <span class="s">'django.db.backends.mysql'</span><span class="p">,</span>
        <span class="s">'NAME'</span><span class="p">:</span> <span class="s">'mydatabase'</span><span class="p">,</span>
        <span class="s">'USER'</span><span class="p">:</span> <span class="s">'test1234'</span><span class="p">,</span>
        <span class="s">'PASSWORD'</span><span class="p">:</span> <span class="s">'test1234'</span><span class="p">,</span>
        <span class="s">'HOST'</span><span class="p">:</span> <span class="s">'127.0.0.1'</span><span class="p">,</span>
        <span class="s">'PORT'</span><span class="p">:</span> <span class="s">'3306'</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><code class="highlighter-rouge">TIME_ZONE</code> 부분은 세계표준시에서 한국시간으로 변경합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">TIME_ZONE</span> <span class="o">=</span> <span class="s">'Asia/Seoul'</span>

</code></pre></div></div>

<p>Static File(CSS, JavaScript, Image)을 사용하기 위해서 Static File 폴더를 지정하고 
폴더를 <code class="highlighter-rouge">BASE_DIR</code> 하단에 생성합니다. 그 후 static 폴더 하단에 css, js, image 폴더를
각각 생성합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">STATIC_URL</span> <span class="o">=</span> <span class="s">'/static/'</span>
<span class="n">STATICFILES_DIRS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">'static'</span><span class="p">)</span>
<span class="p">]</span>

</code></pre></div></div>

<p>Static File은 서버에서 정적으로 제공하는 파일들을 저장하는 곳입니다. 이와는 약간
다르게 사용자가 파일 올리기등의 기능을 이용하여 동적으로 media 파일들이 서버에
저장될 수 있는데 이 경우 다음과 같이 media url과 디렉토리를 설정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c"># media file : 사용자가 웹 애플리케이션에 업로드한 파일(image)</span>
<span class="n">MEDIA_URL</span> <span class="o">=</span> <span class="s">'/media/'</span>
<span class="n">MEDIA_ROOT</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">'media'</span><span class="p">)</span>

</code></pre></div></div>

<p><strong class="subtitle2_fontAwesome">기본 Table 생성</strong></p>

<p>기본 테이블을 생성하기 위해 다음의 명령을 수행합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py migrate</strong></p>
</blockquote>

<p><strong class="subtitle2_fontAwesome">관리자 계정 생성</strong></p>

<p>관리자 page에 접속하기 위한 계정을 생성합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py createsuperuser</strong></p>
</blockquote>

<p><strong class="subtitle2_fontAwesome">서버 기동</strong></p>

<p>project가 정상적으로 생성되었는지 확인하기 위해 내장서버를 이용해 deploy합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py runserver</strong></p>
</blockquote>

<p><strong class="subtitle2_fontAwesome">Admin Page 접속 확인</strong></p>

<p><code class="highlighter-rouge">http://localhost:8000/admin</code>으로 접속 후 관리자 계정으로 로그인</p>

<hr />

<p><strong class="subtitle2_fontAwesome">Model 생성</strong></p>

<p>Model을 생성하기 위해 bbs application 내의 <code class="highlighter-rouge">models.py</code> 파일에 다음과 같은 내용을
입력합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>


<span class="k">class</span> <span class="nc">Board</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">b_title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">b_author</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">b_content</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="c"># b_date = models.DateTimeField()</span>
    <span class="n">b_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c"># 자동갱신</span>
    <span class="n">b_comment_count</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">b_like_count</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">b_title</span>


<span class="k">class</span> <span class="nc">Comment</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">c_author</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">c_content</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">board</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">CASCADE</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">c_content</span>

        
</code></pre></div></div>

<p>Admin Page에 반영하기 위해서 bbs application 내의 <code class="highlighter-rouge">admin.py</code>에 class를 등록합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Board</span><span class="p">,</span> <span class="n">Comment</span>

<span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Board</span><span class="p">)</span>
<span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Comment</span><span class="p">)</span>

</code></pre></div></div>

<p>Database 변경사항을 반영하기 위해서 migration 초안을 생성하고 설정된 Schema를 
Database에 실제로 적용해야 합니다.</p>

<p>마이그레이션 초안을 생성하기 위해서 다음과 같이 실행합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py makemigrations</strong></p>
</blockquote>

<p>설정된 Schema를 Database에 적용하기 위해서 다음과 같이 실행합니다.</p>
<blockquote>
  <p><strong>C:/python-Django/LectureSampleProject&gt; python manage.py migrate</strong></p>
</blockquote>

<p>데이터베이스가 정상적으로 생성되었는지 확인하고 넘어가는게 좋습니다.
<a href="https://sqlitebrowser.org/" target="_blank">DB Browser for SQLite</a>와 같은
툴을 이용하면 쉽게 데이터베이스를 확인할 수 있습니다. 
MySQL같은 경우 <a href="https://www.toadworld.com/downloads" target="_blank">Toad for MySQL</a>을 사용하면 됩니다.</p>

<hr />

<p><strong class="subtitle2_fontAwesome">URL 경로 설정</strong></p>

<p>Project의 ROOT_URLCONF인 <code class="highlighter-rouge">urls.py</code>파일을 다음과 같이 수정하여 계층적으로 
URL을 관리하기 위한 설정을 합니다. 추가적으로 media를 위한 서빙도 추가해야 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span> <span class="n">include</span>
<span class="kn">from</span> <span class="nn">django.views.generic.base</span> <span class="kn">import</span> <span class="n">TemplateView</span>
<span class="kn">from</span> <span class="nn">django.conf.urls.static</span> <span class="kn">import</span> <span class="n">static</span>
<span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">TemplateView</span><span class="o">.</span><span class="n">as_view</span><span class="p">(</span><span class="n">template_name</span><span class="o">=</span><span class="s">'index.html'</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s">'home'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'admin/'</span><span class="p">,</span> <span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'bbs/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'bbs.urls'</span><span class="p">)),</span>
<span class="p">]</span> <span class="o">+</span> <span class="n">static</span><span class="p">(</span><span class="n">settings</span><span class="o">.</span><span class="n">MEDIA_URL</span><span class="p">,</span> <span class="n">document_root</span><span class="o">=</span><span class="n">settings</span><span class="o">.</span><span class="n">MEDIA_ROOT</span><span class="p">)</span>

</code></pre></div></div>

<p>프로젝트 첫 페이지 처리는 가장 쉬운 방식인 TemplateView.as_view()를 이용하여 
처리하도록 하겠습니다.</p>

<p>아시겠지만 url() 함수는 이전 장고버전에서 사용된 기법이고 장고가 2.0으로 버전업되면서
좀 더 사용하기 쉬운 path()와 정규식을 지원하는 re_path()로 변경되었습니다.</p>

<p>url() 혹은 re_path()를 이용하면 정규표현식으로 표현된 url을 특정 HTML과 
쉽게 연결할 수 있습니다.
우리가 이전에 학습한 대로 view함수와 연결해서 처리해도 되며 위와 같이 
TemplateView.as_view()와 같은 함수를 이용하여 HTML을 바로 연결할 수 있습니다.
해당 HTML에서 Template tag도 사용할 수 있습니다.</p>

<p>메인 페이지와 몇몇 화면은 Bootstrap의 Examples 중에서 적당한 화면을 가져와서
사용했습니다. 프로젝트에서 사용한 모든 CSS파일은 Bootstrap Examples에서 구할 수 
있습니다.</p>

<p>아래의 파일은 BASE_DIR/templates/base.html 입니다.</p>

<noscript><pre>&lt;!doctype html&gt;
&lt;html lang=&quot;ko&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;{{ page_title }}&lt;/title&gt;

    &lt;!-- JQuery CDN --&gt;
    &lt;script src=&quot;https://code.jquery.com/jquery-2.2.4.min.js&quot; integrity=&quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

    &lt;!-- Bootstrap core CSS --&gt;
    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1&quot; crossorigin=&quot;anonymous&quot;&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

    {% block html_header %}
    {% endblock %}
  &lt;/head&gt;
  &lt;body&gt;
    {% block html_body %}
    {% endblock %}
  &lt;/body&gt;
&lt;/html&gt;
</pre></noscript>
<script src="https://gist.github.com/moon9342/c6243e653fa745cf5f232124ea7b8e8c.js"> </script>

<p>아래의 파일은 BASE_DIR/templates/index.html 입니다.
index.html은 base.html을 확장해서 사용하지 않았습니다.
index.html을 제외한 다른 template html 파일은 모두 base.html을
확장해서 사용합니다.</p>

<noscript><pre>&lt;!doctype html&gt;
&lt;html lang=&quot;ko&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;LectureSampleProject&lt;/title&gt;

    &lt;!-- Bootstrap core CSS --&gt;
    &lt;link rel=&quot;stylesheet&quot;
          href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css&quot;
          integrity=&quot;sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk&quot;
          crossorigin=&quot;anonymous&quot;&gt;

    &lt;!-- Custom styles for this template --&gt;
    &lt;link href=&quot;/static/css/cover.css&quot; rel=&quot;stylesheet&quot;&gt;
  &lt;/head&gt;

  &lt;body class=&quot;text-center&quot;&gt;
    &lt;div class=&quot;cover-container d-flex w-100 h-100 p-3 mx-auto flex-column&quot;&gt;
      &lt;header class=&quot;masthead mb-auto&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;
          &lt;h3 class=&quot;masthead-brand&quot;&gt;Lecture Sample Project&lt;/h3&gt;
        &lt;/div&gt;
      &lt;/header&gt;

      &lt;main role=&quot;main&quot; class=&quot;inner cover&quot;&gt;
        &lt;p class=&quot;lead&quot;&gt;Django Framework&lt;/p&gt;
        &lt;p class=&quot;lead&quot;&gt;
          &lt;a href=&quot;bbs/list/&quot; class=&quot;btn btn-lg btn-primary&quot;&gt;Enter BBS&lt;/a&gt;
        &lt;/p&gt;
      &lt;/main&gt;

      &lt;footer class=&quot;mastfoot mt-auto&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;
          &lt;p&gt;Copyright 2020&lt;/p&gt;
        &lt;/div&gt;
      &lt;/footer&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre></noscript>
<script src="https://gist.github.com/moon9342/03e41d9310626ec683e8bc41421a95f2.js"> </script>

<hr />

<p><strong class="subtitle2_fontAwesome">기본 Template 설정</strong></p>

<p>하나의 html 파일을 생성해 모든 template 파일의 <code class="highlighter-rouge">base html</code>로 사용합니다.</p>

<p>project folder 하단의 <code class="highlighter-rouge">templates</code> 폴더안에 기본적인 형태로 <code class="highlighter-rouge">base.html</code>을 생성합니다.</p>

<p>Django에 Bootstrap4을 적용하기 위해서는 django-bootstrap4를 설치해야 합니다. 물론 Bootstrap은
간단히 CDN을 포함시켜서 사용할 수 있습니다. 이 모듈을 사용하는 이유는 뒤에서 나올 ModelForm에서 Bootstrap을
적용하기 위함입니다. 아래의 명령어로 package를 설치합니다.</p>

<blockquote>
  <p><strong>pip install django-bootstrap4</strong></p>
</blockquote>

<p>설치가 완료된 다음에  blog project 폴더안의 <code class="highlighter-rouge">settings.py</code> 내 
<code class="highlighter-rouge">INSTALLED_APPS</code>을 다음과 같이 수정하여 bootstrap application을 추가합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
    <span class="s">'posts.apps.PostsConfig'</span><span class="p">,</span>
    <span class="s">'bootstrap4'</span><span class="p">,</span>
<span class="p">]</span>

</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">Model Form 생성</strong></p>

<p>Model Form을 이용해서 <code class="highlighter-rouge">model</code>과 <code class="highlighter-rouge">fields</code>를 지정하면 Model Form이 자동으로 폼 필드를 생성해주기 때문에
Form 처리를 상당히 쉽게 처리할 수 있습니다.</p>

<p>어떤 Model을 기반으로 폼을 작성할 것인지를 <code class="highlighter-rouge">Meta.model</code> 에 지정하고 
<code class="highlighter-rouge">fields</code>는 Model class의 field 중 일부만 폼 클래스에서 사용하고자 할 때 지정하는 
옵션입니다. 모든 field를 대상으로 하려면 <code class="highlighter-rouge">__all__</code>을 field에 대입하면 됩니다.</p>

<p>bbs application 폴더 내에 <code class="highlighter-rouge">forms.py</code> 파일을 생성한 후 아래의 코드와 같이 
Model Form class를 생성합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Board</span>


<span class="k">class</span> <span class="nc">BoardForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">ModelForm</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Board</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">'b_title'</span><span class="p">,</span> <span class="s">'b_author'</span><span class="p">,</span> <span class="s">'b_content'</span><span class="p">]</span>


</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">list 페이지 작성</strong></p>

<p>bbs application의 <code class="highlighter-rouge">urls.py</code>의 내용을 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'bbs'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'list/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_list</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_list'</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>bbs application의 <code class="highlighter-rouge">views.py</code>의 내용을 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Board</span>


<span class="k">def</span> <span class="nf">b_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">posts</span> <span class="o">=</span> <span class="n">Board</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">'-id'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/list.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'posts'</span><span class="p">:</span> <span class="n">posts</span>
    <span class="p">})</span>


</code></pre></div></div>

<p><code class="highlighter-rouge">list.html</code> 파일을 Bootstrap을 이용해서 수정합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

{% extends 'base.html' %}
{% block html_body %}

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/menu_btn.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Bulletin Board System(BBS)<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-primary"</span>
          <span class="na">id=</span><span class="s">"new_post_btn"</span><span class="nt">&gt;</span>새글 작성<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"m-1"</span><span class="nt">&gt;&lt;/div&gt;</span>

  <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">"table table-hover"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;thead</span> <span class="na">class=</span><span class="s">"thead-dark"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>#<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>글제목<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>글작성자<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>글작성일<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>댓글수<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>좋아요<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/thead&gt;</span>
    <span class="nt">&lt;tbody&gt;</span>
    {% for post in posts %}
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"row"</span><span class="nt">&gt;</span>{{ post.id }}<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;td&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/bbs/{{ post.id }}/detail/"</span><span class="nt">&gt;</span>{{ post.b_title }}<span class="nt">&lt;/a&gt;&lt;/td&gt;</span>
      <span class="nt">&lt;td&gt;</span>{{ post.b_author }}<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td&gt;</span>{{ post.b_date }}<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td&gt;</span>{{ post.b_comment_count }}<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td&gt;</span>{{ post.b_like_count }}<span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    {% endfor %}
    <span class="nt">&lt;/tbody&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;/div&gt;</span>

{% endblock %}


</code></pre></div></div>

<p><code class="highlighter-rouge">menu_btn.js</code>의 내용은 다음과 같습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="c1">// 새글쓰기 버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#new_post_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="s1">'/bbs/create/'</span>
    <span class="p">})</span>
  
<span class="p">})</span>

</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">create 페이지 작성</strong></p>

<p><code class="highlighter-rouge">urls.py</code>의 내용을 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'bbs'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'list/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_list</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_list'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'create/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_create</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_create'</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div></div>

<p><code class="highlighter-rouge">views.py</code> 내용을 수정합니다.</p>

<p><code class="highlighter-rouge">POST</code>방식일때와 <code class="highlighter-rouge">GET</code>방식일때를 구분하여 ModelForm을 create.html로 전달합니다.</p>

<p><code class="highlighter-rouge">POST</code>방식일 경우는 ModelForm객체에 데이터가 담겨서 저장되어야 하는 경우이며 <code class="highlighter-rouge">GET</code>방식인
경우는 사용자에게 빈 양식을 보여주기 위해서 사용됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="n">get_object_or_404</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Board</span>
<span class="kn">from</span> <span class="nn">.forms</span> <span class="kn">import</span> <span class="n">BoardForm</span><span class="p">,</span> <span class="n">BoardDetailForm</span>


<span class="k">def</span> <span class="nf">b_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">posts</span> <span class="o">=</span> <span class="n">Board</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">'-id'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/list.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'posts'</span><span class="p">:</span> <span class="n">posts</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_create</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c"># POST 방식</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="c"># ModelForm을 사용하지 않으면</span>
        <span class="c"># class의 instance를 만들어서 save() 호출</span>
        <span class="c"># board = Board()</span>
        <span class="c"># board.b_title = request.POST['b_title']</span>
        <span class="c"># board.save()</span>

        <span class="n">board_form</span> <span class="o">=</span> <span class="n">BoardForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">board_form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">new_post</span> <span class="o">=</span> <span class="n">board_form</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">commit</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="c"># 필요한 경우 field에 값을 수동으로 설정할 수 있다.</span>
            <span class="c"># 예) new_post.b_like_count = 100</span>
            <span class="n">new_post</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'bbs:b_list'</span><span class="p">)</span>

    <span class="c"># GET 방식</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">board_form</span> <span class="o">=</span> <span class="n">BoardForm</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/create.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_form'</span><span class="p">:</span> <span class="n">board_form</span>
    <span class="p">})</span>


</code></pre></div></div>

<p><code class="highlighter-rouge">create.html</code> 파일을 Bootstrap을 이용해서 수정합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


{% extends 'base.html' %}
{% load bootstrap4 %}
{% block html_body %}

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/menu_btn.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>새글 작성<span class="nt">&lt;/h1&gt;</span>

  <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    {% csrf_token %}
    {# {{ board_form }} #}
    {% bootstrap_form board_form %}
    <span class="nt">&lt;br&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-primary"</span><span class="nt">&gt;</span>등록<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
            <span class="na">class=</span><span class="s">"btn btn-secondary"</span>
            <span class="na">id=</span><span class="s">"board_list_btn"</span><span class="nt">&gt;</span>리스트로 돌아가기<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/div&gt;</span>

{% endblock %}



</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">detail 기능 작성</strong></p>

<p>이번에는 list 화면에서 글제목을 클릭했을 때 글 내용을 보여주는 <code class="highlighter-rouge">detail</code> 기능을 구현해 보겠습니다.</p>

<p><code class="highlighter-rouge">urls.py</code> 를 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'bbs'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'list/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_list</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_list'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'create/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_create</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_create'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:board_id&gt;/detail/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_detail'</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div></div>

<p><code class="highlighter-rouge">forms.py</code>를 수정해야 합니다. 이전에는 설명하기 위한 간단한 형태의 ModelForm을 이용했는데
이번에는 조금 복잡한 형태의 ModelForm을 사용해야 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Board</span>


<span class="k">class</span> <span class="nc">BoardForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">ModelForm</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Board</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">'b_title'</span><span class="p">,</span> <span class="s">'b_author'</span><span class="p">,</span> <span class="s">'b_content'</span><span class="p">]</span>


<span class="k">class</span> <span class="nc">BoardDetailForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">ModelForm</span><span class="p">):</span>

    <span class="c"># 각 field를 세부적으로 조정하려면 다음과 같이 widget을 이용해야 한다.</span>
    <span class="c"># b_title = forms.CharField(</span>
    <span class="c">#     label='제목',</span>
    <span class="c">#     widget=forms.TextInput(</span>
    <span class="c">#         attrs={</span>
    <span class="c">#             'class': 'form-control',</span>
    <span class="c">#         }</span>
    <span class="c">#     )</span>
    <span class="c"># )</span>
    <span class="n">b_title</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'글제목'</span><span class="p">)</span>
    <span class="n">b_author</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'글작성자'</span><span class="p">)</span>
    <span class="n">b_content</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'글내용'</span><span class="p">)</span>
    <span class="n">b_comment_count</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'댓글수'</span><span class="p">)</span>
    <span class="n">b_like_count</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'좋아요'</span><span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Board</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>

    <span class="k">def</span> <span class="nf">show_board_detail</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_all_fields_from_form</span><span class="p">(</span><span class="n">BoardDetailForm</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">fields</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="n">field</span><span class="p">]</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
                <span class="s">'readonly'</span><span class="p">:</span> <span class="s">'readonly'</span>
            <span class="p">})</span>

    <span class="k">def</span> <span class="nf">show_board_update</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="s">'b_like_count'</span><span class="p">]</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
            <span class="s">'readonly'</span><span class="p">:</span> <span class="s">'readonly'</span>
        <span class="p">})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="s">'b_comment_count'</span><span class="p">]</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">attrs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
            <span class="s">'readonly'</span><span class="p">:</span> <span class="s">'readonly'</span>
        <span class="p">})</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">get_all_fields_from_form</span><span class="p">(</span><span class="n">instance</span><span class="p">):</span>

        <span class="n">fields</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">base_fields</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">declared_fields</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">field</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">fields</span><span class="p">:</span>
                <span class="n">fields</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">field</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">fields</span>


</code></pre></div></div>

<p><code class="highlighter-rouge">views.py</code>를 수정합니다. 다음과 같이 작성합니다. (b_detail 함수만 살펴보겠습니다.)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">b_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">board_id</span><span class="p">):</span>

    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">board_id</span><span class="p">)</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span>
    <span class="p">})</span>

</code></pre></div></div>

<p><code class="highlighter-rouge">detail.html</code>을 작성해야 합니다. 다음과 같이 작성합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


{% extends 'base.html' %}
{% load bootstrap4 %}
{% block html_body %}

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/menu_btn.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>글 상세보기<span class="nt">&lt;/h1&gt;</span>

  번호 : {{ board_detail_form.initial.id }}
  <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    {% csrf_token %}
    {% bootstrap_form board_detail_form %}
    <span class="nt">&lt;br&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-success"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_list_btn"</span><span class="nt">&gt;</span>리스트로 돌아가기<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-primary"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_update_btn"</span><span class="nt">&gt;</span>수정<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-danger"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_delete_btn"</span><span class="nt">&gt;</span>삭제<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-warning"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_like_btn"</span><span class="nt">&gt;</span>좋아요<span class="nt">&lt;/button&gt;</span>

<span class="nt">&lt;/div&gt;</span>

{% endblock %}



</code></pre></div></div>

<p>여기서 나오는 각 버튼에 대한 이벤트 처리는 jQuery를 이용해서 처리했습니다. 따라서 최종
<code class="highlighter-rouge">menu_btn.js</code>는 다음과 같이 작성합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 새글쓰기 버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#new_post_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="s1">'/bbs/create/'</span>
    <span class="p">})</span>

    <span class="c1">// 리스트버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#board_list_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s1">'/bbs/list/'</span>
    <span class="p">})</span>

    <span class="c1">// 수정버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#board_update_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">query_string</span> <span class="o">=</span> <span class="s1">'?board_id='</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'data-board_id'</span><span class="p">)</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s1">'/bbs/update'</span> <span class="o">+</span> <span class="nx">query_string</span>
    <span class="p">})</span>

    <span class="c1">// 삭제버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#board_delete_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">confirm</span><span class="p">(</span><span class="s1">'정말 삭제할까요?'</span><span class="p">)</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">query_string</span> <span class="o">=</span> <span class="s1">'?board_id='</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'data-board_id'</span><span class="p">)</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s1">'/bbs/delete'</span> <span class="o">+</span> <span class="nx">query_string</span>
        <span class="p">}</span>
    <span class="p">})</span>

    <span class="c1">// 좋아요버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#board_like_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">query_string</span> <span class="o">=</span> <span class="s1">'?board_id='</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'data-board_id'</span><span class="p">)</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s1">'/bbs/like'</span> <span class="o">+</span> <span class="nx">query_string</span>
    <span class="p">})</span>

<span class="p">})</span>

</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">delete 기능 작성</strong></p>

<p>이번에는 detail 화면에서 삭제버튼을 클릭했을 때 글을 삭제하는 <code class="highlighter-rouge">delete</code> 기능을 구현해 보겠습니다.
위의 jQuery에서 사용하는 URL을 이용하여 <code class="highlighter-rouge">urls.py</code> 를 알맞게 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'bbs'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'list/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_list</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_list'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'create/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_create</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_create'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:board_id&gt;/detail/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_detail'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'delete/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_delete</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_delete'</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div></div>

<p><code class="highlighter-rouge">views.py</code>를 수정합니다. (b_delete 함수만 살펴보겠습니다.)</p>

<p>삭제처리가 된 후 list화면으로 redirect처리 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">b_delete</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'board_id'</span><span class="p">])</span>
    <span class="n">post</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'bbs:b_list'</span><span class="p">)</span>
    
</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">좋아요 기능 작성</strong></p>

<p>좋아요 버튼을 클릭했을 때 처리되는 과정에 대해서 알아보겠습니다. 먼저 <code class="highlighter-rouge">urls.py</code> 파일부터 
수정해야 될 듯 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'bbs'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'list/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_list</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_list'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'create/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_create</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_create'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:board_id&gt;/detail/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_detail'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'delete/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_delete</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_delete'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'like/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_like</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_like'</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>그 다음으로는 해당 <code class="highlighter-rouge">views.py</code>파일의 view 함수를 구현해야 합니다. 좋아요 개수를 1 증가한 후
detail 화면으로 전환합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">b_like</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'board_id'</span><span class="p">])</span>
    <span class="n">post</span><span class="o">.</span><span class="n">b_like_count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">post</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span>
    <span class="p">})</span>

</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">update 기능 작성</strong></p>

<p>마지막으로 수정기능을 구현해보겠습니다.</p>

<p><code class="highlighter-rouge">urls.py</code> 파일을 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'bbs'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'list/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_list</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_list'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'create/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_create</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_create'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:board_id&gt;/detail/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_detail'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'delete/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_delete</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_delete'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'like/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_like</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_like'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'update/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_update</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_update'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:board_id&gt;/updateProcess/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_update_process</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_update_process'</span><span class="p">),</span>
<span class="p">]</span>


</code></pre></div></div>

<p><code class="highlighter-rouge">views.py</code> 파일을 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="n">get_object_or_404</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Board</span>
<span class="kn">from</span> <span class="nn">.forms</span> <span class="kn">import</span> <span class="n">BoardForm</span><span class="p">,</span> <span class="n">BoardDetailForm</span>


<span class="k">def</span> <span class="nf">b_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">posts</span> <span class="o">=</span> <span class="n">Board</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">'-id'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/list.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'posts'</span><span class="p">:</span> <span class="n">posts</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_create</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c"># POST 방식</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="c"># ModelForm을 사용하지 않으면</span>
        <span class="c"># class의 instance를 만들어서 save() 호출</span>
        <span class="c"># board = Board()</span>
        <span class="c"># board.b_title = request.POST['b_title']</span>
        <span class="c"># board.save()</span>

        <span class="n">board_form</span> <span class="o">=</span> <span class="n">BoardForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">board_form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">new_post</span> <span class="o">=</span> <span class="n">board_form</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">commit</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="c"># 필요한 경우 field에 값을 수동으로 설정할 수 있다.</span>
            <span class="c"># 예) new_post.b_like_count = 100</span>
            <span class="n">new_post</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'bbs:b_list'</span><span class="p">)</span>

    <span class="c"># GET 방식</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">board_form</span> <span class="o">=</span> <span class="n">BoardForm</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/create.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_form'</span><span class="p">:</span> <span class="n">board_form</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">board_id</span><span class="p">):</span>

    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">board_id</span><span class="p">)</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_delete</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'board_id'</span><span class="p">])</span>
    <span class="n">post</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'bbs:b_list'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">b_like</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'board_id'</span><span class="p">])</span>
    <span class="n">post</span><span class="o">.</span><span class="n">b_like_count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">post</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_update</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'board_id'</span><span class="p">])</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_update</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/update.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_update_process</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">board_id</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">board_id</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">,</span> <span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">board_detail_form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">board_detail_form</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
            <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
                <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span>
            <span class="p">})</span>


</code></pre></div></div>

<p>마지막으로 <code class="highlighter-rouge">update.html</code> 파일을 수정합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


{% extends 'base.html' %}
{% load bootstrap4 %}
{% block html_body %}

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/menu_btn.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Post Update<span class="nt">&lt;/h1&gt;</span>

  번호 : {{ board_detail_form.initial.id }}
  <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">'{% url '</span><span class="na">bbs:b_update_process</span><span class="err">'</span> <span class="na">board_detail_form</span><span class="err">.</span><span class="na">initial</span><span class="err">.</span><span class="na">id</span> <span class="err">%}'</span>
        <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
  {% csrf_token %}
  {% bootstrap_form board_detail_form %}
  <span class="nt">&lt;br&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-primary"</span>
          <span class="na">id=</span><span class="s">"board_list_btn"</span><span class="nt">&gt;</span>리스트로 돌아가기<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span>
          <span class="na">class=</span><span class="s">"btn btn-primary"</span><span class="nt">&gt;</span>수정적용<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/form&gt;</span>

<span class="nt">&lt;/div&gt;</span>

{% endblock %}



</code></pre></div></div>

<hr />

<p><strong class="subtitle2_fontAwesome">댓글(comment) 기능 작성</strong></p>

<p>댓글기능은 detail 화면에서 AJAX를 이용하여 구현합니다.</p>

<p>제일 먼저 손봐야 할 파일은 <code class="highlighter-rouge">views.py</code> 일 듯 합니다. 기존의 <code class="highlighter-rouge">b_detail</code> 함수는 특정 글에 대한 상세정보를
보여주기 위한 view 함수인데 여기에 댓글에 대한 처리가 같이 이루어져야 하기 때문입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">b_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">board_id</span><span class="p">):</span>

    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">board_id</span><span class="p">)</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>

    <span class="c"># comment 정보도 가져와야 한다.</span>
    <span class="n">comments</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">comment_set</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">'-id'</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span><span class="p">,</span>
        <span class="s">'comments'</span><span class="p">:</span> <span class="n">comments</span>
    <span class="p">})</span>

</code></pre></div></div>

<p>그 다음으로 수정해야 할 파일은 아마도 <code class="highlighter-rouge">detail.html</code>일 겁니다. view함수에서 넘어온 댓글 데이터를 출력하기 위한
내용이 포함되어야 할 듯 하네요. 또한 AJAX관련 처리를 하기 위해 HTML Element에 id 속성도 몇개 추가했습니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


{% extends 'base.html' %}
{% load bootstrap4 %}
{% block html_body %}

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/menu_btn.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>글 상세보기<span class="nt">&lt;/h1&gt;</span>

  번호 : <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"board_id"</span><span class="nt">&gt;</span>{{ board_detail_form.initial.id }}<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    {% csrf_token %}
    {% bootstrap_form board_detail_form %}
    <span class="nt">&lt;br&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-success"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_list_btn"</span><span class="nt">&gt;</span>리스트로 돌아가기<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-primary"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_update_btn"</span><span class="nt">&gt;</span>수정<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-danger"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_delete_btn"</span><span class="nt">&gt;</span>삭제<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
          <span class="na">class=</span><span class="s">"btn btn-warning"</span>
          <span class="na">data-board_id=</span><span class="s">"{{ board_detail_form.initial.id }}"</span>
          <span class="na">id=</span><span class="s">"board_like_btn"</span><span class="nt">&gt;</span>좋아요<span class="nt">&lt;/button&gt;</span>

<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;br&gt;&lt;br&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;h3&gt;</span>댓글<span class="nt">&lt;/h3&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"c_name"</span><span class="nt">&gt;</span>이름<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span>
           <span class="na">class=</span><span class="s">"form-control"</span>
           <span class="na">id=</span><span class="s">"c_name"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"c_content"</span><span class="nt">&gt;</span>내용<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span>
           <span class="na">class=</span><span class="s">"form-control"</span>
           <span class="na">id=</span><span class="s">"c_content"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;br&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
            <span class="na">class=</span><span class="s">"btn btn-info"</span>
            <span class="na">id=</span><span class="s">"comment_create_btn"</span><span class="nt">&gt;</span>등록<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">"table table-hover"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;thead</span> <span class="na">class=</span><span class="s">"thead-dark"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>글작성자<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>글내용<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"col"</span><span class="nt">&gt;</span>삭제<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/thead&gt;</span>
    <span class="nt">&lt;tbody</span> <span class="na">id=</span><span class="s">"comment_body"</span><span class="nt">&gt;</span>
    {% for comment in comments %}
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td&gt;</span>{{ comment.c_author }}<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td&gt;</span>{{ comment.c_content }}<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span>
                <span class="na">class=</span><span class="s">"btn btn-danger"</span>
                <span class="na">data-comment_id=</span><span class="s">"{{ comment.id }}"</span>
                <span class="na">id=</span><span class="s">"comment_delete_btn"</span><span class="nt">&gt;</span>삭제<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    {% endfor %}
    <span class="nt">&lt;/tbody&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;br&gt;&lt;br&gt;&lt;br&gt;</span>
{% endblock %}



</code></pre></div></div>

<p>댓글 등록과 삭제기능은 JQuery를 이용한 AJAX로 처리했습니다. 이를 확인하기 위해 일단 Javascript 파일을 봐야할 듯 합니다.
<code class="highlighter-rouge">menu_btn.js</code>의 내용은 다음과 같습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 새글쓰기 버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#new_post_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="s1">'/bbs/create/'</span>
    <span class="p">})</span>

    <span class="c1">// 리스트버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#board_list_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s1">'/bbs/list/'</span>
    <span class="p">})</span>

    <span class="c1">// 수정버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#board_update_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">query_string</span> <span class="o">=</span> <span class="s1">'?board_id='</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'data-board_id'</span><span class="p">)</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s1">'/bbs/update'</span> <span class="o">+</span> <span class="nx">query_string</span>
    <span class="p">})</span>

    <span class="c1">// 삭제버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#board_delete_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">confirm</span><span class="p">(</span><span class="s1">'정말 삭제할까요?'</span><span class="p">)</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">query_string</span> <span class="o">=</span> <span class="s1">'?board_id='</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'data-board_id'</span><span class="p">)</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s1">'/bbs/delete'</span> <span class="o">+</span> <span class="nx">query_string</span>
        <span class="p">}</span>
    <span class="p">})</span>

    <span class="c1">// 좋아요버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#board_like_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">query_string</span> <span class="o">=</span> <span class="s1">'?board_id='</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'data-board_id'</span><span class="p">)</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s1">'/bbs/like'</span> <span class="o">+</span> <span class="nx">query_string</span>
    <span class="p">})</span>

    <span class="c1">// 댓글 등록버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#comment_create_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>

        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
            <span class="na">async</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="na">url</span> <span class="p">:</span> <span class="s1">'/bbs/commentCreate/'</span><span class="p">,</span>
            <span class="na">type</span> <span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>
            <span class="na">data</span> <span class="p">:</span> <span class="p">{</span>
                <span class="na">board_id</span> <span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'#board_id'</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span>
                <span class="na">comment_author</span> <span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'#c_name'</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span>
                <span class="na">comment_content</span> <span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'#c_content'</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span>
            <span class="p">},</span>
            <span class="na">dataType</span> <span class="p">:</span> <span class="s1">'json'</span><span class="p">,</span>
            <span class="na">timeout</span> <span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
            <span class="na">success</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">let</span> <span class="nx">tr</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'&lt;tr&gt;&lt;/tr&gt;'</span><span class="p">)</span>
                <span class="kd">let</span> <span class="nx">author_td</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'&lt;td&gt;&lt;/td&gt;'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">c_author</span><span class="p">)</span>
                <span class="kd">let</span> <span class="nx">content_td</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'&lt;td&gt;&lt;/td&gt;'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">c_content</span><span class="p">)</span>
                <span class="kd">let</span> <span class="nx">btn_td</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'&lt;td&gt;&lt;/td&gt;'</span><span class="p">)</span>
                <span class="kd">let</span> <span class="nx">del_btn</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'&lt;button&gt;&lt;/button&gt;'</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'type'</span><span class="p">,</span><span class="s1">'button'</span><span class="p">)</span>
                <span class="nx">del_btn</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'data-comment_id'</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">c_id</span><span class="p">)</span>
                <span class="nx">del_btn</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">'btn btn-danger'</span><span class="p">)</span>
                <span class="nx">del_btn</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'id'</span><span class="p">,</span><span class="s1">'comment_delete_btn'</span><span class="p">)</span>
                <span class="nx">del_btn</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s1">'삭제'</span><span class="p">)</span>
                <span class="nx">del_btn</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                        <span class="na">async</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
                        <span class="na">url</span> <span class="p">:</span> <span class="s1">'/bbs/commentDelete/'</span><span class="p">,</span>
                        <span class="na">type</span> <span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>
                        <span class="na">data</span> <span class="p">:</span> <span class="p">{</span>
                            <span class="na">comment_id</span> <span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">c_id</span>
                        <span class="p">},</span>
                        <span class="na">dataType</span> <span class="p">:</span> <span class="s1">'json'</span><span class="p">,</span>
                        <span class="na">timeout</span> <span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
                        <span class="na">success</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">tr</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
                        <span class="p">},</span>
                        <span class="na">error</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">alert</span><span class="p">(</span><span class="s1">'댓글 삭제 실패!'</span><span class="p">)</span>
                        <span class="p">}</span>
                    <span class="p">})</span>
                <span class="p">})</span>

                <span class="nx">btn_td</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">del_btn</span><span class="p">)</span>

                <span class="nx">tr</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">author_td</span><span class="p">)</span>
                <span class="nx">tr</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">content_td</span><span class="p">)</span>
                <span class="nx">tr</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">btn_td</span><span class="p">)</span>

                <span class="nx">$</span><span class="p">(</span><span class="s1">'#comment_body'</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">tr</span><span class="p">)</span>

            <span class="p">},</span>
            <span class="na">error</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>

                <span class="nx">alert</span><span class="p">(</span><span class="s1">'댓글 등록 실패!'</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">})</span>

    <span class="c1">// 댓글 삭제버튼 클릭시</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'#comment_delete_btn'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">del_tr</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
            <span class="na">async</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="na">url</span> <span class="p">:</span> <span class="s1">'/bbs/commentDelete/'</span><span class="p">,</span>
            <span class="na">type</span> <span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>
            <span class="na">data</span> <span class="p">:</span> <span class="p">{</span>
                <span class="na">comment_id</span> <span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'data-comment_id'</span><span class="p">)</span>
            <span class="p">},</span>
            <span class="na">dataType</span> <span class="p">:</span> <span class="s1">'json'</span><span class="p">,</span>
            <span class="na">timeout</span> <span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
            <span class="na">success</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">del_tr</span><span class="p">.</span><span class="nx">parent</span><span class="p">().</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">()</span>
            <span class="p">},</span>
            <span class="na">error</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">alert</span><span class="p">(</span><span class="s1">'댓글 삭제 실패!'</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">})</span>

<span class="p">})</span>

</code></pre></div></div>

<p>AJAX 코드에서 보이는 URL에 대한 처리를 하기 위해 <code class="highlighter-rouge">urls.py</code>를 수정해야 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'bbs'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'list/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_list</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_list'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'create/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_create</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_create'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:board_id&gt;/detail/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_detail'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'delete/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_delete</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_delete'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'like/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_like</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_like'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'update/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_update</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_update'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:board_id&gt;/updateProcess/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">b_update_process</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'b_update_process'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'commentCreate/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">c_create</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'c_create'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'commentDelete/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">c_delete</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'c_delete'</span><span class="p">),</span>

<span class="p">]</span>


</code></pre></div></div>

<p>마지막으로 로직처리와 AJAX 호출의 결과로 보내지는 JSON을 어떻게 처리하는지를 확인하기 위해 <code class="highlighter-rouge">views.py</code> 파일의 전체 내용을
살펴보겠습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="n">get_object_or_404</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Board</span><span class="p">,</span> <span class="n">Comment</span>
<span class="kn">from</span> <span class="nn">.forms</span> <span class="kn">import</span> <span class="n">BoardForm</span><span class="p">,</span> <span class="n">BoardDetailForm</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">JsonResponse</span>


<span class="k">def</span> <span class="nf">b_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">posts</span> <span class="o">=</span> <span class="n">Board</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">'-id'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/list.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'posts'</span><span class="p">:</span> <span class="n">posts</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_create</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c"># POST 방식</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="c"># ModelForm을 사용하지 않으면</span>
        <span class="c"># class의 instance를 만들어서 save() 호출</span>
        <span class="c"># board = Board()</span>
        <span class="c"># board.b_title = request.POST['b_title']</span>
        <span class="c"># board.save()</span>

        <span class="n">board_form</span> <span class="o">=</span> <span class="n">BoardForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">board_form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">new_post</span> <span class="o">=</span> <span class="n">board_form</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">commit</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="c"># 필요한 경우 field에 값을 수동으로 설정할 수 있다.</span>
            <span class="c"># 예) new_post.b_like_count = 100</span>
            <span class="n">new_post</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'bbs:b_list'</span><span class="p">)</span>

    <span class="c"># GET 방식</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">board_form</span> <span class="o">=</span> <span class="n">BoardForm</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/create.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_form'</span><span class="p">:</span> <span class="n">board_form</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">board_id</span><span class="p">):</span>

    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">board_id</span><span class="p">)</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>

    <span class="c"># comment 정보도 가져와야 한다.</span>
    <span class="n">comments</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">comment_set</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">'-id'</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span><span class="p">,</span>
        <span class="s">'comments'</span><span class="p">:</span> <span class="n">comments</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_delete</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'board_id'</span><span class="p">])</span>
    <span class="n">post</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'bbs:b_list'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">b_like</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'board_id'</span><span class="p">])</span>
    <span class="n">post</span><span class="o">.</span><span class="n">b_like_count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">post</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_update</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'board_id'</span><span class="p">])</span>

    <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>
    <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_update</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/update.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">b_update_process</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">board_id</span><span class="p">):</span>
    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">board_id</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">board_detail_form</span> <span class="o">=</span> <span class="n">BoardDetailForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">,</span> <span class="n">instance</span><span class="o">=</span><span class="n">post</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">board_detail_form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">board_detail_form</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
            <span class="n">board_detail_form</span><span class="o">.</span><span class="n">show_board_detail</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'bbs/detail.html'</span><span class="p">,</span> <span class="p">{</span>
                <span class="s">'board_detail_form'</span><span class="p">:</span> <span class="n">board_detail_form</span>
            <span class="p">})</span>


<span class="k">def</span> <span class="nf">c_delete</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>

    <span class="n">comment</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Comment</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'comment_id'</span><span class="p">])</span>
    <span class="n">comment</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span>
        <span class="s">'code'</span><span class="p">:</span> <span class="s">'200'</span>   <span class="c"># code 200의 의미는 삭제성공의 의미로 가정</span>
    <span class="p">},</span> <span class="n">json_dumps_params</span><span class="o">=</span><span class="p">{</span><span class="s">'ensure_ascii'</span><span class="p">:</span> <span class="bp">True</span><span class="p">})</span>


<span class="k">def</span> <span class="nf">c_create</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>

    <span class="n">comment</span> <span class="o">=</span> <span class="n">Comment</span><span class="p">()</span>
    <span class="n">comment</span><span class="o">.</span><span class="n">c_author</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'comment_author'</span><span class="p">]</span>
    <span class="n">comment</span><span class="o">.</span><span class="n">c_content</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'comment_content'</span><span class="p">]</span>
    <span class="n">comment</span><span class="o">.</span><span class="n">board_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'board_id'</span><span class="p">]</span>
    <span class="n">comment</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span>
        <span class="s">'code'</span><span class="p">:</span> <span class="s">'200'</span><span class="p">,</span>   <span class="c"># code 200의 의미는 삭제성공의 의미로 가정</span>
        <span class="s">'c_author'</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'comment_author'</span><span class="p">],</span>
        <span class="s">'c_content'</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">'comment_content'</span><span class="p">],</span>
        <span class="s">'c_id'</span><span class="p">:</span> <span class="n">comment</span><span class="o">.</span><span class="nb">id</span>
    <span class="p">},</span> <span class="n">json_dumps_params</span><span class="o">=</span><span class="p">{</span><span class="s">'ensure_ascii'</span><span class="p">:</span> <span class="bp">True</span><span class="p">})</span>


</code></pre></div></div>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Python 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.python.org/" target="_blank">Python Official HomePage</a></li>
    <li>점프 투 파이썬 - 이지스 퍼블리싱</li>
    <li>전문가를 위한 파이썬(Fluent Python) - 한빛미디어</li>
    <li>파이썬 웹 프로그래밍 - 한빛미디어</li>
    <li>이미지 출처 : <a href="http://www.freepik.com" target="_blank">Designed by rawpixel.com / Freepik</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Python Django 웹 프레임워크(6) - Poll project 개발(5)</title>
	  <link>https://moon9342.github.io/python-lecture-python-django-poll-project-5</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-05-07T01:40:00+09:00</pubDate>
	  <guid>https://moon9342.github.io/python-lecture-python-django-poll-project-5</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Python 기초강의는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./python-lecture-python-introduction">Python 기초강의(1) - Introduction</a></li>
    <li><a href="./python-lecture-python-basic">Python 기초강의(2) - Python 기본</a></li>
    <li><a href="./python-lecture-python-control-statement">Python 기초강의(3) - Python 제어문</a></li>
    <li><a href="./python-lecture-python-function">Python 기초강의(4) - Python function</a></li>
    <li><a href="./python-lecture-python-program-exercise-1">Python 기초강의(5) - Python 연습문제(1)</a></li>
    <li><a href="./python-lecture-python-OOP">Python 기초강의(6) - Python 객체지향</a></li>
    <li><a href="./python-lecture-python-magic-function">Python 기초강의(7) - Python Magic Function</a></li>
    <li><a href="./python-lecture-python-first-class">Python 기초강의(8) - Python First Class</a></li>
    <li><a href="./python-lecture-python-closure">Python 기초강의(9) - Python Closure</a></li>
    <li><a href="./python-lecture-python-decorator">Python 기초강의(10) - Python Decorator</a></li>
    <li><a href="./python-lecture-python-generator">Python 기초강의(11) - Python Generator</a></li>
    <li><a href="./python-lecture-python-module">Python 기초강의(12) - Python Module</a></li>
    <li><a href="./python-lecture-python-exception">Python 기초강의(13) - Python Exception &amp; File</a></li>
    <li><a href="./python-lecture-python-oop-exercise">Python 기초강의(14) - Python 연습문제(2)</a></li>
    <li><a href="./python-lecture-python-web-basic-jquery">Web basic &amp; jQuery(Front End Web Application)</a></li>
    <li><a href="./python-lecture-python-django-introduction">Python Django 웹 프레임워크(1) - introduction</a></li>
    <li><a href="./python-lecture-python-django-poll-project-1">Python Django 웹 프레임워크(2) - Poll project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-2">Python Django 웹 프레임워크(3) - Poll project 개발(2)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-3">Python Django 웹 프레임워크(4) - Poll project 개발(3)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-4">Python Django 웹 프레임워크(5) - Poll project 개발(4)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-5">Python Django 웹 프레임워크(6) - Poll project 개발(5)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_1">Python Django 웹 프레임워크(7) - LectureSample project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_2">Python Django 웹 프레임워크(8) - LectureSample project 개발(2)</a></li>


</ul>

<hr />

<p><strong class="subtitle_fontAwesome">마지막 화면 작성</strong></p>

<p>아래의 그림은 우리의 Poll Project의 전체 처리 흐름을 도식화 한 것이죠.</p>

<p><img src="../../assets/built/images/python-django-polls-view-tempalte.png" alt="python django poll" /></p>

<p>이전 절에서 첫화면에 있는 3개의 질문 중 하나를 선택했을 때, 질문에 대한 답변 항목을
보여주고 투표하도록 하는 화면을 작성해 보았습니다.</p>

<p>이번에는 답변항목을 선택한 후 <code class="highlighter-rouge">Vote</code> 버튼을 클릭했을 때 처리되는 부분에 과정과 최종
화면을 작성해 보겠습니다.</p>

<p>먼저 View 함수인 vote() 부터 알아봐야 할 듯 합니다.</p>

<p>View 함수인 vote()의 호출과 연관된 URL은 detail.html안의 form tag의 action에서
나타납니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"{% url 'polls:vote' question.id %}"</span>
          <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>


</code></pre></div></div>

<p>이 부분은 결국 <code class="highlighter-rouge">polls/urls.py</code> 파일안에 다음과 같은 부분과 mapping되게 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">app_name</span> <span class="o">=</span> <span class="s">"polls"</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'index'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:question_id&gt;/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'detail'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:question_id&gt;/vote/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">vote</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'vote'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:question_id&gt;/results/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">results</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'results'</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>그럼 vote() 함수를 작성해 보도록 하죠.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">get_object_or_404</span>
<span class="kn">from</span> <span class="nn">polls.models</span> <span class="kn">import</span> <span class="n">Question</span><span class="p">,</span> <span class="n">Choice</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponseRedirect</span><span class="p">,</span> <span class="n">HttpResponse</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">reverse</span>


<span class="k">def</span> <span class="nf">vote</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="n">question_id</span><span class="p">):</span>
    <span class="n">question</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Question</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">question_id</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">selected_choice</span> <span class="o">=</span> <span class="n">question</span><span class="o">.</span><span class="n">choice_set</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">[</span><span class="s">'choice'</span><span class="p">])</span>
    <span class="k">except</span> <span class="p">(</span><span class="nb">KeyError</span><span class="p">,</span> <span class="n">Choice</span><span class="o">.</span><span class="n">DoesNotExist</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'polls/detail.html'</span><span class="p">,</span> <span class="p">{</span>
            <span class="s">'question'</span><span class="p">:</span> <span class="n">question</span><span class="p">,</span>
            <span class="s">'error_message'</span><span class="p">:</span> <span class="s">"아무것도 선택하지 않았어요!!"</span>
        <span class="p">})</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">selected_choice</span><span class="o">.</span><span class="n">votes</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">selected_choice</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="s">'polls:results'</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">question</span><span class="o">.</span><span class="nb">id</span><span class="p">,)))</span>

</code></pre></div></div>

<p>이번에도 상당히 복잡할 듯 보이네요. 기억해야 하는 부분들을 하나씩 살펴보겠습니다.</p>

<ul>
  <li>
    <p>이번에는 <code class="highlighter-rouge">redirect</code> 라는 기능이 필요합니다. 이를 위해 <code class="highlighter-rouge">HttpResponseRedirect</code>를
import 합니다.</p>
  </li>
  <li>
    <p>url 처리를 위해 <code class="highlighter-rouge">reverse()</code> 함수를 역시 import 처리 합니다.</p>
  </li>
  <li>
    <p>vote() 함수의 request 객체는 필수 인자이고 detail() 처럼 question_id 인자를 더
받습니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">get_object_or_404()</code> 단축함수를 사용하였고 이번에는 Choice Table을 검색하는
용도로 사용되고 있습니다. 검색 조건은 <code class="highlighter-rouge">pk=request.POST['choice']</code>로 되어 있네요.
<code class="highlighter-rouge">request.POST</code>는 form의 데이터를 담고 있는 객체입니다. <code class="highlighter-rouge">request.POST['choice']</code>는
form의 데이터 중 key값이 choice에 해당하는 값인 choice.id를 의미하겠네요.</p>
  </li>
  <li>
    <p>만약 <code class="highlighter-rouge">choice</code>라는 key가 <code class="highlighter-rouge">request.POST</code>에 존재하지 않으면 <code class="highlighter-rouge">KeyError</code> exception이
발생합니다. 또한 검색 조건에 맞는 객체가 없으면 <code class="highlighter-rouge">Choice.DoesNotExist</code> exception이
발생합니다.</p>
  </li>
  <li>
    <p>만약 exception이 발생하면 render() 함수를 이용해 question과 error_message 변수를
detail.html로 전달합니다. 사용자에게 질문 항목을 다시 보여주기 위함이죠.</p>
  </li>
  <li>
    <p>exception이 발생하지 않으면 Choice 객체의 votes 속성의 값을 1증가시킵니다. 그리고
변경사항을 Choice Table에 적용하게 됩니다.</p>
  </li>
  <li>
    <p>주의해야 할 점은 이번에 vote()함수가 반환하는 객체가 HttpResponse가 아닌 
<code class="highlighter-rouge">HttpResponseRedirect</code> 라는 것입니다. <code class="highlighter-rouge">HttpResponseRedirect</code> 객체는 redirect할 URL을
인자로 가지며 reverse() 함수를 이용하여 생성합니다. 이 reverse() 함수는 URL pattern으로부터
URL string을 구하기 위해서 사용합니다. 당연히 URLConf에 이미 정의된 URL pattern을 활용해서
URL string을 추출하게 됩니다.</p>
  </li>
</ul>

<p><strong class="subtitle2_fontAwesome">View 함수 results()와 Template 작성</strong></p>

<p>View 함수인 vote() 함수의 redirect로 results() 함수가 호출되게 됩니다. 정확하게는
서버로 부터 redirect 하라는 내용을 결과로 받은 클라이언트 웹 브라우져가 redirect URL로
다시 요청을 보내는 것이죠.</p>

<p>이번에는 먼저 <code class="highlighter-rouge">results()</code> 함수를 작성한 후 결과를 보여주는 <code class="highlighter-rouge">result.html</code> Template 파일을 작성하도록
하겠습니다.</p>

<p>아래와 같이 results() 함수를 작성합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">results</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">question_id</span><span class="p">):</span>
    <span class="n">question</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Question</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">question_id</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'polls/results.html'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">'question'</span><span class="p">:</span> <span class="n">question</span>
    <span class="p">})</span>

</code></pre></div></div>

<p>앞에서 다 설명했던 부분들이니 바로 <code class="highlighter-rouge">results.html</code> 파일을 작성하도록 하겠습니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>{{ question.question_text }}<span class="nt">&lt;/h1&gt;</span>

    <span class="nt">&lt;ul&gt;</span>
    {% for choice in question.choice_set.all %}
        <span class="nt">&lt;li&gt;</span>{{ choice.choice_text }} - {{ choice.votes }} vote{{ choice.votes|pluralize }}<span class="nt">&lt;/li&gt;</span>
    {% endfor %}
    <span class="nt">&lt;/ul&gt;</span>

    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{% url 'polls:detail' question.id %}"</span><span class="nt">&gt;</span>다시 투표<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>


</code></pre></div></div>

<p>음.. 대부분의 내용은 이제 어느정도 이해가 갈 듯 합니다. 한가지 특이한 코드가 있는데
<code class="highlighter-rouge">choice.votes|pluralize</code>입니다. <code class="highlighter-rouge">choice.votes</code>의 값에 따라서 복수 접미사(s)를
붙여주는 역할을 합니다.</p>

<p>이제 모든 작업을 완료했습니다. 서버를 기동하고 <code class="highlighter-rouge">/polls</code>로 접속해서 잘 동작하는지
확인해보도록 하죠.</p>

<p><img src="../../assets/built/images/python-django-third-page.png" alt="python django third page" /></p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Python 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.python.org/" target="_blank">Python Official HomePage</a></li>
    <li>점프 투 파이썬 - 이지스 퍼블리싱</li>
    <li>전문가를 위한 파이썬(Fluent Python) - 한빛미디어</li>
    <li>파이썬 웹 프로그래밍 - 한빛미디어</li>
    <li>이미지 출처 : <a href="http://www.freepik.com" target="_blank">Designed by rawpixel.com / Freepik</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Python Django 웹 프레임워크(5) - Poll project 개발(4)</title>
	  <link>https://moon9342.github.io/python-lecture-python-django-poll-project-4</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-05-06T01:40:00+09:00</pubDate>
	  <guid>https://moon9342.github.io/python-lecture-python-django-poll-project-4</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Python 기초강의는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./python-lecture-python-introduction">Python 기초강의(1) - Introduction</a></li>
    <li><a href="./python-lecture-python-basic">Python 기초강의(2) - Python 기본</a></li>
    <li><a href="./python-lecture-python-control-statement">Python 기초강의(3) - Python 제어문</a></li>
    <li><a href="./python-lecture-python-function">Python 기초강의(4) - Python function</a></li>
    <li><a href="./python-lecture-python-program-exercise-1">Python 기초강의(5) - Python 연습문제(1)</a></li>
    <li><a href="./python-lecture-python-OOP">Python 기초강의(6) - Python 객체지향</a></li>
    <li><a href="./python-lecture-python-magic-function">Python 기초강의(7) - Python Magic Function</a></li>
    <li><a href="./python-lecture-python-first-class">Python 기초강의(8) - Python First Class</a></li>
    <li><a href="./python-lecture-python-closure">Python 기초강의(9) - Python Closure</a></li>
    <li><a href="./python-lecture-python-decorator">Python 기초강의(10) - Python Decorator</a></li>
    <li><a href="./python-lecture-python-generator">Python 기초강의(11) - Python Generator</a></li>
    <li><a href="./python-lecture-python-module">Python 기초강의(12) - Python Module</a></li>
    <li><a href="./python-lecture-python-exception">Python 기초강의(13) - Python Exception &amp; File</a></li>
    <li><a href="./python-lecture-python-oop-exercise">Python 기초강의(14) - Python 연습문제(2)</a></li>
    <li><a href="./python-lecture-python-web-basic-jquery">Web basic &amp; jQuery(Front End Web Application)</a></li>
    <li><a href="./python-lecture-python-django-introduction">Python Django 웹 프레임워크(1) - introduction</a></li>
    <li><a href="./python-lecture-python-django-poll-project-1">Python Django 웹 프레임워크(2) - Poll project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-2">Python Django 웹 프레임워크(3) - Poll project 개발(2)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-3">Python Django 웹 프레임워크(4) - Poll project 개발(3)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-4">Python Django 웹 프레임워크(5) - Poll project 개발(4)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-5">Python Django 웹 프레임워크(6) - Poll project 개발(5)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_1">Python Django 웹 프레임워크(7) - LectureSample project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_2">Python Django 웹 프레임워크(8) - LectureSample project 개발(2)</a></li>


</ul>

<hr />

<p><strong class="subtitle_fontAwesome">두번째 화면 작성</strong></p>

<p>아래의 그림은 우리의 Poll Project의 전체 처리 흐름을 도식화 한 것이죠.</p>

<p><img src="../../assets/built/images/python-django-polls-view-tempalte.png" alt="python django poll" /></p>

<p>이전 절에서 <code class="highlighter-rouge">/polls/</code> URL로 접속했을 때 View 함수와 Template 파일을 작성해서 
첫 화면을 browser에 출력해보았습니다.</p>

<p>이번에는 첫화면에 있는 3개의 질문 중 하나를 선택했을 때, 질문에 대한 답변 항목을
보여주고 투표하도록 하는 화면을 작성해 보도록 하겠습니다.</p>

<p>먼저 Template 화면부터 생성하면서 어떠한 데이터가 View 함수로부터 넘어오면 되는지를
생각해보면 될 듯 합니다.</p>

<p>Template 파일의 이름은 <code class="highlighter-rouge">detail.html</code> 이고 아래와 같이 입력합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>{{ question.question_text }}<span class="nt">&lt;/h1&gt;</span>
    {% if error_message %}
    <span class="nt">&lt;p&gt;&lt;strong&gt;</span>{{ error_message }}<span class="nt">&lt;/strong&gt;&lt;/p&gt;</span>
    {% endif %}

    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"{% url 'polls:vote' question.id %}"</span>
          <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    {% csrf_token %}
    {% for choice in question.choice_set.all %}
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"radio"</span> <span class="na">name=</span><span class="s">"choice"</span>
               <span class="na">id=</span><span class="s">"choice{{ forloop.counter }}"</span>
               <span class="na">value=</span><span class="s">"{{ choice.id }}"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"choice{{ forloop.counter }}"</span><span class="nt">&gt;</span>
            {{ choice.choice_text }}
        <span class="nt">&lt;/label&gt;&lt;br&gt;</span>
    {% endfor %}
        <span class="nt">&lt;br&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"Vote"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>


</code></pre></div></div>

<p>상당히 복잡하네요. 하나씩 알아보도록 하겠습니다.</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">question.question_text</code> : 질문을 제목으로 사용하는 것입니다. 크게 표현하기 위해서
<code class="highlighter-rouge">&lt;h1&gt;</code> tag를 이용하고 있습니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">error_message</code> : 만약 에러가 있으면 에러 메시지를 화면에 보여주기 위해서 if 처리를
했습니다. 에러 체크는 View의 vote() 함수에 구현될 것입니다. 만약 vote() 함수에서 exception이 
발생하면 error_message를 담아서 detail.html Template을 rendering하게 됩니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">form</code>에 입력된 데이터는 <code class="highlighter-rouge">POST</code> 방식으로 서버측에 전달됩니다. REST 환경이 아닐때는
GET과 POST방식을 사용하는데 데이터를 읽어올때는 일반적으로 GET, 서버측의 데이터를 변경할때는
POST 방식을 이용합니다. (반드시 그런것은 아닙니다.) 그러면 데이터를 어디로 보낼까요?
<code class="highlighter-rouge">action</code> 속성에 해당 URL을 명시합니다. 여기서는 <code class="highlighter-rouge">url</code> template tag를 이용하여 받는 곳의
URL을 <code class="highlighter-rouge">polls:vote</code>로 설정했습니다. polls:vote에서 polls는 namespace를 의미하고 vote는
URL의 이름을 의미합니다. 이 부분은 <code class="highlighter-rouge">polls/urls.py</code>에 명시되어 있습니다. 결과적으로 받는곳의
URL은 <code class="highlighter-rouge">/polls/1/vote/</code> 과 같은 형식이 될 것입니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">form</code>을 처리하는데 보안상의 issue를 해결하기 위해 <code class="highlighter-rouge">csrf_token</code> template tag를 사용했습니다.
CSRF(Cross Site Request Forgery) 공격은 특정 웹사이트에서 이미 인증받은 사용자를 이용하여 웹
사이트를 공격하는 방법입니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">for</code> 구문을 이용하여 Question 객체가 가지고 있는 데이터를 이용하여 radio button을 구현하고
있습니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">forloop.counter</code> : for loop를 실행한 횟수를 담고 있는 template 변수 입니다. 여기서 label
tag의 <code class="highlighter-rouge">for</code> 속성과 radio button의 <code class="highlighter-rouge">id</code> 속성 값이 같아야 서로 바인딩 된다는것도 추가로 기억해야 합니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">Vote</code> 버튼을 누르면 사용자가 선택한 form data가 POST 방식으로 <code class="highlighter-rouge">polls:vote</code> URL로 전송됩니다.
이렇게 전송된 데이터는 View 함수 vote()에서 access 할 수 있습니다.</p>
  </li>
  <li>
    <p>마지막으로 Question 객체의 <code class="highlighter-rouge">choose_set</code> 속성에 대해서 알아보겠습니다. Question Table과 Choice 
Table은 1:N 의 관계를 가지고 있고 Foreign Key로 연결되어 있습니다. 이렇게 1:N의 관계에서
1 Table에 N Table의 항목이라는 의미로 <code class="highlighter-rouge">xxx_set</code> 속성을 default로 제공합니다. 즉, 
question.choice_set.all()이라고 하면 Question Table의 question record에 연결된 Choice Table의
모든 record를 의미하게 됩니다. 단, Template 문법상 method 호출을 표시하는 <code class="highlighter-rouge">()</code>는 사용하지 않기때문에
Template 파일에서는 <code class="highlighter-rouge">question.choice_set.all</code> 이라고 사용된 것입니다.</p>
  </li>
</ul>

<p>상당히 복잡했는데 몇번을 다시 보고 동영상을 통해서 이해하시면 좋을 듯 합니다.</p>

<p>이제 이 Template을 사용하는 View 함수인 detail() 함수를 작성하고 실행해서 투표항목이 정상적으로
출력이 되는지를 확인해 보도록 하겠습니다.</p>

<p><code class="highlighter-rouge">views.py</code> 파일을 다시 열고 기존의 index() 함수 다음에 아래의 코드를 입력합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">get_object_or_404</span>
<span class="kn">from</span> <span class="nn">polls.models</span> <span class="kn">import</span> <span class="n">Question</span>


<span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">latest_question_list</span> <span class="o">=</span> <span class="n">Question</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">'-pub_date'</span><span class="p">)[:</span><span class="mi">5</span><span class="p">]</span>
    <span class="n">context</span> <span class="o">=</span> <span class="p">{</span><span class="s">'latest_question_list'</span><span class="p">:</span> <span class="n">latest_question_list</span><span class="p">}</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'polls/index.html'</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">question_id</span><span class="p">):</span>
    <span class="n">question</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Question</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">question_id</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'polls/detail.html'</span><span class="p">,</span> <span class="p">{</span><span class="s">'question'</span><span class="p">:</span> <span class="n">question</span><span class="p">})</span>

</code></pre></div></div>

<p>View 함수를 정의했습니다. detail()이라는 함수를 정의했고 추가적으로 URL로 부터 추출한
<code class="highlighter-rouge">question_id</code> 인자를 View 함수의 인자로 넘겨 받았습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:question_id&gt;/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'detail'</span><span class="p">)</span>

</code></pre></div></div>

<p>위의 부분에서 <code class="highlighter-rouge">&lt;int:question_id&gt;</code> 부분을 의미합니다.</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">get_object_or_404()</code> : Django에서 제공되는 단축함수입니다. 이 함수의 첫번째 인자는
Model class이고 두번째 인자부터는 검색 조건을 여러 개 사용할 수 있습니다. 우리예제에서는
검색조건이 <code class="highlighter-rouge">pk=question_id</code> 이기 때문에 primary key가 question_id와 일치하는 객체를 
조회하게 됩니다. 만약 조회된 객체가 없을 시 <code class="highlighter-rouge">Http404</code> exception이 발생하게 됩니다.</p>
  </li>
  <li>
    <p>추가적으로 <code class="highlighter-rouge">get_list_or_404()</code> 단축함수도 있습니다. 이것은 대상객체의 집합을 list로
가져올 때 사용합니다.</p>
  </li>
</ul>

<p><strong class="subtitle2_fontAwesome">지금까지의 작업 확인</strong></p>

<p>지금까지 작성한 내용으로 서버를 기동시켜서 <code class="highlighter-rouge">/polls/</code>로 접속한 후<br />
3개의 질문 중 하나를 선택했을 때, 질문에 대한 답변 항목을 보여주고 
투표하도록 하는 화면이 나오는지를 확인하도록 하겠습니다. 
아직 미구현인 부분들은 주석처리 후 서버를 기동시켜서 접속을 해보도록 하죠</p>

<p>특히 form tag <code class="highlighter-rouge">action</code> 속성부분은 일단 주석처리해야 할 듯 합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
{% comment %}
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"{% url 'polls:vote' question.id %}"</span>
          <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
{% endcomment %}
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">""</span>
          <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>

</code></pre></div></div>

<p>그리고 데이터베이스에 각 질문에 대한 선택항목을 저장하지 않았기 때문에
Admin site에 접속해서 질문에 대한 선택항목을 저장한 후 실행하면 다음과 같은 화면을
보실 수 있습니다.</p>

<p><img src="../../assets/built/images/python-django-second-page.png" alt="python django second page" /></p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Python 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.python.org/" target="_blank">Python Official HomePage</a></li>
    <li>점프 투 파이썬 - 이지스 퍼블리싱</li>
    <li>전문가를 위한 파이썬(Fluent Python) - 한빛미디어</li>
    <li>파이썬 웹 프로그래밍 - 한빛미디어</li>
    <li>이미지 출처 : <a href="http://www.freepik.com" target="_blank">Designed by rawpixel.com / Freepik</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Python Django 웹 프레임워크(4) - Poll project 개발(3)</title>
	  <link>https://moon9342.github.io/python-lecture-python-django-poll-project-3</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-05-05T01:40:00+09:00</pubDate>
	  <guid>https://moon9342.github.io/python-lecture-python-django-poll-project-3</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Python 기초강의는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./python-lecture-python-introduction">Python 기초강의(1) - Introduction</a></li>
    <li><a href="./python-lecture-python-basic">Python 기초강의(2) - Python 기본</a></li>
    <li><a href="./python-lecture-python-control-statement">Python 기초강의(3) - Python 제어문</a></li>
    <li><a href="./python-lecture-python-function">Python 기초강의(4) - Python function</a></li>
    <li><a href="./python-lecture-python-program-exercise-1">Python 기초강의(5) - Python 연습문제(1)</a></li>
    <li><a href="./python-lecture-python-OOP">Python 기초강의(6) - Python 객체지향</a></li>
    <li><a href="./python-lecture-python-magic-function">Python 기초강의(7) - Python Magic Function</a></li>
    <li><a href="./python-lecture-python-first-class">Python 기초강의(8) - Python First Class</a></li>
    <li><a href="./python-lecture-python-closure">Python 기초강의(9) - Python Closure</a></li>
    <li><a href="./python-lecture-python-decorator">Python 기초강의(10) - Python Decorator</a></li>
    <li><a href="./python-lecture-python-generator">Python 기초강의(11) - Python Generator</a></li>
    <li><a href="./python-lecture-python-module">Python 기초강의(12) - Python Module</a></li>
    <li><a href="./python-lecture-python-exception">Python 기초강의(13) - Python Exception &amp; File</a></li>
    <li><a href="./python-lecture-python-oop-exercise">Python 기초강의(14) - Python 연습문제(2)</a></li>
    <li><a href="./python-lecture-python-web-basic-jquery">Web basic &amp; jQuery(Front End Web Application)</a></li>
    <li><a href="./python-lecture-python-django-introduction">Python Django 웹 프레임워크(1) - introduction</a></li>
    <li><a href="./python-lecture-python-django-poll-project-1">Python Django 웹 프레임워크(2) - Poll project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-2">Python Django 웹 프레임워크(3) - Poll project 개발(2)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-3">Python Django 웹 프레임워크(4) - Poll project 개발(3)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-4">Python Django 웹 프레임워크(5) - Poll project 개발(4)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-5">Python Django 웹 프레임워크(6) - Poll project 개발(5)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_1">Python Django 웹 프레임워크(7) - LectureSample project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_2">Python Django 웹 프레임워크(8) - LectureSample project 개발(2)</a></li>


</ul>

<hr />

<p><strong class="subtitle_fontAwesome">View와 Template</strong></p>

<p>아래의 그림은 우리의 Poll Project의 전체 처리 흐름을 도식화 한 것입니다.
다시한번 느끼지만 그림에는 정말 소질이 없군요.(글자도 잘 안보이고…)</p>

<p><img src="../../assets/built/images/python-django-polls-view-tempalte.png" alt="python django poll" /></p>

<p>기본적으로 4개의 URL을 사용하고 여기에 Admin site까지 포함하여 총 5개의 URL을 이용할
것입니다. 그리고 각각의 URL은 View와 1:1로 mapping되어 있습니다. 일반적으로 URL은 View와
1:1 mapping을 하지만 N:1의 관계도 가능합니다.</p>

<p>각각의 View는 Template을 이용하여 결과 화면을 클라이언트에게 전송하게 됩니다.</p>

<p>제일 먼저 처리해야 하는 내용은 URL과 View의 mapping처리 입니다. 이것을 <code class="highlighter-rouge">URLConf</code>라고 하며
<code class="highlighter-rouge">urls.py</code> 파일에 작성합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">polls</span> <span class="kn">import</span> <span class="n">views</span>


<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'admin/'</span><span class="p">,</span> <span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'polls/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'index'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'polls/&lt;int:question_id&gt;/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'detail'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'polls/&lt;int:question_id&gt;/vote/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">vote</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'vote'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'polls/&lt;int:question_id&gt;/results/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">results</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'results'</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>몇가지 기억해야 하는 사항이 있습니다.</p>

<ul>
  <li>
    <p>URL pattern matching은 위에서 아래로 진행됩니다. 따라서 정의하는 순서에 유의해야 합니다.</p>
  </li>
  <li>
    <p>Django의 Admin site에 대한 URLConf는 이미 정의 되어 있습니다. 항상 똑같이 사용하세요.</p>
  </li>
  <li>
    <p>path() 함수를 이용하여 URL과 View를 mapping하고 있습니다.</p>
  </li>
</ul>

<p>여기서 중요한 것은 <code class="highlighter-rouge">path()</code> 함수인데 path()함수는 2개의 필수인자를 가집니다. 
우리예에서 보듯이 route와 view입니다. 또한 kwargs와 name 2개의 선택인자를 가질 수 있습니다.</p>

<ul>
  <li><code class="highlighter-rouge">route</code> : URL pattern을 표현하는 문자열입니다. URL String이라고도 합니다.</li>
  <li><code class="highlighter-rouge">view</code> : URL String이 matching되면 호출되는 View의 함수입니다. HttpRequest 객체와 URL String에서
추출된 항목이 View 함수의 인자로 전달됩니다.</li>
  <li><code class="highlighter-rouge">kwargs</code> : URL String에서 추출된 항목외에 추가적인 인자를 View 함수에 전달할 목적으로 dict 형태로
사용됩니다.</li>
  <li><code class="highlighter-rouge">name</code> : 각 URL pattern에 대한 논리적인 이름입니다. 이 이름은 Template에서 사용됩니다.</li>
</ul>

<p>두가지 예만 들어보겠습니다.</p>

<p>만약 요청 URL이 <code class="highlighter-rouge">/polls/</code> 라면 <code class="highlighter-rouge">path('polls/', views.index, name='index')</code> 부분이 
matching됩니다. 이 경우 URL String에서 추출되는 항목이 없기 때문에 <code class="highlighter-rouge">views.index(request)</code> 처럼
View 함수가 호출됩니다. 그리고 이 URL pattern의 이름은 <code class="highlighter-rouge">index</code>로 정의했습니다.</p>

<p>만약 요청 URL이 <code class="highlighter-rouge">/polls/5</code> 라면 URL String에서 추출되는 항목이 있기 때문에 
<code class="highlighter-rouge">views.detail(request,question_id=3)</code>처럼 인자가 대입되서 View 함수가 호출되게 됩니다. 그리고
이 URL pattern의 이름은 <code class="highlighter-rouge">detail</code>로 정했습니다.</p>

<p>기억해야 할 점 또 하나는 <code class="highlighter-rouge">mysite/settings.py</code> 파일에 <code class="highlighter-rouge">ROOT_URLCONF</code> 항목이 정의되어 있는데
Django는 URL 분석 시, 이 항목에 정의된 <code class="highlighter-rouge">urls.py</code>파일을 가장 먼저 분석하게 됩니다.</p>

<p>여기서 조금 복잡한 사항이 하나 나옵니다. 지금 우리가 하는 것처럼 <code class="highlighter-rouge">mysite/urls.py</code> 파일에
모든 URL과 View의 mapping을 기술 할 수도 있지만 이런 경우 재사용과 관리에 문제가 발생할 수 있습니다.</p>

<p>그래서 일반적으로 urls.py를 applciation단위로 나누어서 작성합니다.</p>

<p>즉, <code class="highlighter-rouge">mysite/urls.py</code>의 내용은 아래와 같이 작성합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span> <span class="n">include</span>
<span class="kn">from</span> <span class="nn">polls</span> <span class="kn">import</span> <span class="n">views</span> 

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'admin/'</span><span class="p">,</span> <span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'polls/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'polls.urls'</span><span class="p">)),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>그리고 <code class="highlighter-rouge">MyFirstWebPoll/polls/urls.py</code> 파일은 아래와 같이 작성합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">'polls'</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'index'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:question_id&gt;/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'detail'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:question_id&gt;/vote/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">vote</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'vote'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'&lt;int:question_id&gt;/results/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">results</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'results'</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>이렇게 파일을 나누어서 URL과 View의 mapping을 관리할 수 있습니다. 당연히 파일을
분리해서 관리하는 것이 훨씬 좋은 방법입니다. <code class="highlighter-rouge">app_name = 'polls'</code> 부분은 
URL pattern이 충돌나는 것을 방지하기 위한 namespace 설정입니다.</p>

<p>우리 예제에서는 polls가 하나뿐이지만 보통의 프로젝트에서는 여러 개의 application으로
구성되는 경우가 대부분입니다. 만약 polls application의 URL 패턴 이름과 blog application의
URL 패턴 이름이 모두 detail이면 이 둘을 구분해야 하고 app_name 변수로 이름 공간을 지정하는 것입니다.</p>

<p>즉, polls application의 detail은 polls:detail, blog application의 detail은
blog:detail로 표기해서 구분하게 됩니다.</p>

<p>우리의 예제는 파일을 나누어서 URL과 View의 mapping관리를 하는 방법을 사용하도록
하겠습니다.</p>

<p><strong class="subtitle2_fontAwesome">Template 작성</strong></p>

<p>위에서 URL과 View에 대한 mapping설정을 했으니 이제 View와 Template을 작성할 차례입니다.
이 둘은 서로 서로에게 영향을 미치기 때문에 보통 같이 작업하는게 일반적이지만 UI화면을
먼저 생각하면서 로직처리를 하는것이 쉬울 수 있기 때문에 View보다는 Template을 먼저 작성하면
조금 더 쉬운 경향이 있습니다.</p>

<p>자 그럼 Template 파일 index.html을 작성해보도록 하죠. 이 Template 파일 역시 관리상의
이유로 하나의 폴더에서 모든 Template을 관리하는 것이 아니라 application별로 따로 관리합니다.</p>

<blockquote>
  <p><strong>C:/python-Django/MyFirstWebPoll/polls&gt; mkdir templates</strong></p>
</blockquote>

<blockquote>
  <p><strong>C:/python-Django/MyFirstWebPoll/polls&gt; mkdir templates/polls</strong></p>
</blockquote>

<blockquote>
  <p><strong>C:/python-Django/MyFirstWebPoll/polls&gt; cd templates/polls</strong></p>
</blockquote>

<p>이 폴더 내에서 <code class="highlighter-rouge">index.html</code>을 아래처럼 작성합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    {% if latest_question_list %}
        <span class="nt">&lt;ul&gt;</span>
        {% for question in latest_question_list %}
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/polls/{{ question.id }}/"</span><span class="nt">&gt;</span>{{ question.question_text }}<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
        {% endfor %}
        <span class="nt">&lt;/ul&gt;</span>
    {% else %}
        <span class="nt">&lt;p&gt;</span>No Polls are available<span class="nt">&lt;/p&gt;</span>
    {% endif %}
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>


</code></pre></div></div>

<p>여기서 주의해서 보셔야 하는 건 <code class="highlighter-rouge">latest_question_list</code> 입니다. View 함수인 index()에서
넘겨주는 인자입니다. 코드로 유추해 보건대 설문에 대한 번호와 질문내용을 가지고 있는 Question
객체로 구성된 list 일 듯 합니다.</p>

<p>사실 구현할 때는 역으로 생각하셔야 합니다. 즉, Template을 만들면서 어떤 데이터를 넘겨줘야
Template이 잘 표현될지를 생각해서 이 데이터를 View 함수에서 <code class="highlighter-rouge">context</code> 변수로 정의한 후 
Template으로 넘겨줘야 하기 때문입니다.</p>

<p><strong class="subtitle2_fontAwesome">View 작성</strong></p>

<p><code class="highlighter-rouge">C:/python-Django/MyFirstWebPoll/polls</code> 폴더 하단에 있는 <code class="highlighter-rouge">view.py</code>을 다음과 같이 
수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">polls.models</span> <span class="kn">import</span> <span class="n">Question</span>


<span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">latest_question_list</span> <span class="o">=</span> <span class="n">Question</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">'-pub_date'</span><span class="p">)[:</span><span class="mi">5</span><span class="p">]</span>
    <span class="n">context</span> <span class="o">=</span> <span class="p">{</span><span class="s">'latest_question_list'</span><span class="p">:</span> <span class="n">latest_question_list</span><span class="p">}</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'polls/index.html'</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>

</code></pre></div></div>

<p>기억해야 할 사항은 다음과 같습니다.</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">render()</code> : 단축함수 중 하나로 Template 코드를 로딩한 후 context 변수를 적용하고
그 결과를 HttpResponse 객체에 담아 반환하는 작업을 수행합니다. 이런 복잡한 과정을 Django
에서는 render() 내장함수로 제공하고 있습니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">Question</code> : Question Table에 access하기 위해 polls.models.Question class를 사용합니다.</p>
  </li>
  <li>
    <p>View 함수를 정의한 후 Template에게 넘겨줄 데이터를 생성합니다.</p>
  </li>
  <li>
    <p>Template에게 넘겨줄 때는 dict 형태로 넘겨주며 context 객체를 생성해서 render()함수에
전달합니다.</p>
  </li>
  <li>
    <p>index() 함수는 최종적으로 클라이언트에게 응답할 데이터인 HttpResponse 객체를 반환합니다.</p>
  </li>
  <li>
    <p>한가지 의문이 드는것은 render() 함수에서 Template 파일을 어떻게 찾느냐 하는 것입니다. 
Django에서 Template 파일을 찾을 때 <code class="highlighter-rouge">settings.py</code> 파일에 정의된 <code class="highlighter-rouge">TEMPLATES</code> 그리고
<code class="highlighter-rouge">INSTALLED_APPS</code>에서 지정된 디렉토리를 검색하게 됩니다.</p>
  </li>
</ul>

<p><strong class="subtitle2_fontAwesome">지금까지의 작업 확인</strong></p>

<p>지금까지 작성한 내용으로 서버를 기동시켜서 <code class="highlighter-rouge">/polls/</code>로 접속하려 합니다. 하지만 아직 작성하지
않은 파일들이 존재하기 때문에 바로 동작되지는 않을테고 아직 미구현인 부분들은 주석처리 후
서버를 기동시켜서 접속을 해보도록 하죠</p>

<p>당연히 <code class="highlighter-rouge">No Polls are available</code>가 출력되게 됩니다. 아직 어떠한 질문도 등록하지 않았거든요.</p>

<p>그럼 Admin site로 접속한 후 데이터를 입력하고 다시 접속해 보도록 하겠습니다. 
질문은 3개만 등록하도록 하겠습니다.</p>

<ul>
  <li>취미가 무엇인가요?</li>
  <li>가장 좋아하는 선수는 누구인가요?</li>
  <li>어디에 살고 있나요?</li>
</ul>

<p>이제 화면이 정상적으로 보이나요?</p>

<p><img src="../../assets/built/images/python-django-first-page.png" alt="python django first page" /></p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Python 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.python.org/" target="_blank">Python Official HomePage</a></li>
    <li>점프 투 파이썬 - 이지스 퍼블리싱</li>
    <li>전문가를 위한 파이썬(Fluent Python) - 한빛미디어</li>
    <li>파이썬 웹 프로그래밍 - 한빛미디어</li>
    <li>이미지 출처 : <a href="http://www.freepik.com" target="_blank">Designed by rawpixel.com / Freepik</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Python Django 웹 프레임워크(3) - Poll project 개발(2)</title>
	  <link>https://moon9342.github.io/python-lecture-python-django-poll-project-2</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-05-04T01:40:00+09:00</pubDate>
	  <guid>https://moon9342.github.io/python-lecture-python-django-poll-project-2</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Python 기초강의는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./python-lecture-python-introduction">Python 기초강의(1) - Introduction</a></li>
    <li><a href="./python-lecture-python-basic">Python 기초강의(2) - Python 기본</a></li>
    <li><a href="./python-lecture-python-control-statement">Python 기초강의(3) - Python 제어문</a></li>
    <li><a href="./python-lecture-python-function">Python 기초강의(4) - Python function</a></li>
    <li><a href="./python-lecture-python-program-exercise-1">Python 기초강의(5) - Python 연습문제(1)</a></li>
    <li><a href="./python-lecture-python-OOP">Python 기초강의(6) - Python 객체지향</a></li>
    <li><a href="./python-lecture-python-magic-function">Python 기초강의(7) - Python Magic Function</a></li>
    <li><a href="./python-lecture-python-first-class">Python 기초강의(8) - Python First Class</a></li>
    <li><a href="./python-lecture-python-closure">Python 기초강의(9) - Python Closure</a></li>
    <li><a href="./python-lecture-python-decorator">Python 기초강의(10) - Python Decorator</a></li>
    <li><a href="./python-lecture-python-generator">Python 기초강의(11) - Python Generator</a></li>
    <li><a href="./python-lecture-python-module">Python 기초강의(12) - Python Module</a></li>
    <li><a href="./python-lecture-python-exception">Python 기초강의(13) - Python Exception &amp; File</a></li>
    <li><a href="./python-lecture-python-oop-exercise">Python 기초강의(14) - Python 연습문제(2)</a></li>
    <li><a href="./python-lecture-python-web-basic-jquery">Web basic &amp; jQuery(Front End Web Application)</a></li>
    <li><a href="./python-lecture-python-django-introduction">Python Django 웹 프레임워크(1) - introduction</a></li>
    <li><a href="./python-lecture-python-django-poll-project-1">Python Django 웹 프레임워크(2) - Poll project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-2">Python Django 웹 프레임워크(3) - Poll project 개발(2)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-3">Python Django 웹 프레임워크(4) - Poll project 개발(3)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-4">Python Django 웹 프레임워크(5) - Poll project 개발(4)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-5">Python Django 웹 프레임워크(6) - Poll project 개발(5)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_1">Python Django 웹 프레임워크(7) - LectureSample project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_2">Python Django 웹 프레임워크(8) - LectureSample project 개발(2)</a></li>


</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Model</strong></p>

<p>Model 작업은 우리가 사용하는 Database에 Table을 생성하는 작업입니다.</p>

<p>우리의 polls application은 Questions와 Choice 두 개의 테이블이 필요합니다.
Table은 <code class="highlighter-rouge">models.py</code> 파일에 정의합니다.</p>

<p><code class="highlighter-rouge">C:/python-Django/MyFirstWebPoll/polls</code> 폴더에 존재하는 <code class="highlighter-rouge">models.py</code> 파일의 내용을
다음과 같이 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>


<span class="k">class</span> <span class="nc">Question</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">question_text</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">pub_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="s">'date published'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">question_text</span>


<span class="k">class</span> <span class="nc">Choice</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">question</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Question</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">CASCADE</span><span class="p">)</span>
    <span class="n">choice_text</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">votes</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">choice_text</span>

</code></pre></div></div>

<p>Django에서는 Table을 하나의 class로 정의합니다. 또한 Table의 column은 class의
속성으로 mapping합니다.</p>

<p>위에서 표현이 안된 부분이 있는데 바로 Table의 <code class="highlighter-rouge">id</code> column입니다. Table의 id column은 
Primary key로 지정되며 정수(integer)형태입니다. 또한 Django가 자동으로 생성해
주기 때문에 class 정의에서는 표현되지 않았습니다.</p>

<p>참고로 PK(primary key)는 <code class="highlighter-rouge">Not Null</code> 속성을 가지며 <code class="highlighter-rouge">Autoincrement</code>로 지정됩니다.</p>

<p>조심해야 될 점은 Choice class의 FK로 지정되어 있는 question 입니다. FK이기 때문에
어떤 reference할 class만 명시하면 되고 실제 Table이 생성될 때 <code class="highlighter-rouge">_id</code> 접미어가 붙어서
column이 생성됩니다. 즉, column명이 <code class="highlighter-rouge">question</code> 이 아닌 <code class="highlighter-rouge">question_id</code> 가 되게 됩니다.</p>

<p><strong class="subtitle2_fontAwesome">Admin site에 테이블 반영</strong></p>

<p>이전에 살펴본 Admin site에는 Users와 Groups Table만 존재합니다. 방금 <code class="highlighter-rouge">models.py</code> 에서
정의한 Table도 Admin site에서 보이도록 등록해야 할 듯 합니다.</p>

<p><code class="highlighter-rouge">admin.py</code> 파일을 아래의 내용으로 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">polls.models</span> <span class="kn">import</span> <span class="n">Question</span><span class="p">,</span> <span class="n">Choice</span>

<span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Question</span><span class="p">)</span>
<span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Choice</span><span class="p">)</span>

</code></pre></div></div>

<p><strong class="subtitle2_fontAwesome">Database 변경 사항 반영</strong></p>

<p>당연한 말이지만 Database에 변경사항이 있으면 이를 반영해 주어야 합니다. 
class로 Table만 정의한 단계이지만 실제로 Database에 반영을 시켜줘야 합니다.</p>

<blockquote>
  <p><strong>C:/python-Django/MyFirstWebPoll&gt; python manage.py makemigrations</strong></p>
</blockquote>

<blockquote>
  <p><strong>C:/python-Django/MyFirstWebPoll&gt; python manage.py migrate</strong></p>
</blockquote>

<p>마이그레이션은 테이블 및 필드의 생성, 삭제, 변경 등과 같이 데이터베이스에 대한
변경사항을 알려주는 정보입니다. 물리적으로는 application 디렉토리별로 마이그레이션
파일이 존재합니다. makemigrations 명령에 의해 polls/migrations 디렉토리 하위에
마이그레이션 파일들이 생성되고 이 마이그레이션 파일들을 이용해 migrate 명령으로
데이터베이스에 대한 테이블을 만들어줍니다.</p>

<p><strong class="subtitle2_fontAwesome">Admin site에서 변경사항 확인</strong></p>

<p>지금까지 작업한 내용이 잘 적용되었나를 Admin site에서 확인해보도록 하겠습니다.
서버를 기동하고 Admin site에 접속합니다.</p>

<p><img src="../../assets/built/images/python-django-admin-database.png" alt="python django admin database" /></p>

<p>이번 절에서는 Model을 생성하는 방법에 대해서 알아보았습니다. 그럼 다음에는 View와 Template에
대해서 알아보면서 우리의 간단한 Web Project를 완성해 보도록 하죠.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Python 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.python.org/" target="_blank">Python Official HomePage</a></li>
    <li>점프 투 파이썬 - 이지스 퍼블리싱</li>
    <li>전문가를 위한 파이썬(Fluent Python) - 한빛미디어</li>
    <li>파이썬 웹 프로그래밍 - 한빛미디어</li>
    <li>이미지 출처 : <a href="http://www.freepik.com" target="_blank">Designed by rawpixel.com / Freepik</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Python Django 웹 프레임워크(2) - Poll project 개발(1)</title>
	  <link>https://moon9342.github.io/python-lecture-python-django-poll-project-1</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-05-03T01:40:00+09:00</pubDate>
	  <guid>https://moon9342.github.io/python-lecture-python-django-poll-project-1</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Python 기초강의는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./python-lecture-python-introduction">Python 기초강의(1) - Introduction</a></li>
    <li><a href="./python-lecture-python-basic">Python 기초강의(2) - Python 기본</a></li>
    <li><a href="./python-lecture-python-control-statement">Python 기초강의(3) - Python 제어문</a></li>
    <li><a href="./python-lecture-python-function">Python 기초강의(4) - Python function</a></li>
    <li><a href="./python-lecture-python-program-exercise-1">Python 기초강의(5) - Python 연습문제(1)</a></li>
    <li><a href="./python-lecture-python-OOP">Python 기초강의(6) - Python 객체지향</a></li>
    <li><a href="./python-lecture-python-magic-function">Python 기초강의(7) - Python Magic Function</a></li>
    <li><a href="./python-lecture-python-first-class">Python 기초강의(8) - Python First Class</a></li>
    <li><a href="./python-lecture-python-closure">Python 기초강의(9) - Python Closure</a></li>
    <li><a href="./python-lecture-python-decorator">Python 기초강의(10) - Python Decorator</a></li>
    <li><a href="./python-lecture-python-generator">Python 기초강의(11) - Python Generator</a></li>
    <li><a href="./python-lecture-python-module">Python 기초강의(12) - Python Module</a></li>
    <li><a href="./python-lecture-python-exception">Python 기초강의(13) - Python Exception &amp; File</a></li>
    <li><a href="./python-lecture-python-oop-exercise">Python 기초강의(14) - Python 연습문제(2)</a></li>
    <li><a href="./python-lecture-python-web-basic-jquery">Web basic &amp; jQuery(Front End Web Application)</a></li>
    <li><a href="./python-lecture-python-django-introduction">Python Django 웹 프레임워크(1) - introduction</a></li>
    <li><a href="./python-lecture-python-django-poll-project-1">Python Django 웹 프레임워크(2) - Poll project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-2">Python Django 웹 프레임워크(3) - Poll project 개발(2)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-3">Python Django 웹 프레임워크(4) - Poll project 개발(3)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-4">Python Django 웹 프레임워크(5) - Poll project 개발(4)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-5">Python Django 웹 프레임워크(6) - Poll project 개발(5)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_1">Python Django 웹 프레임워크(7) - LectureSample project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_2">Python Django 웹 프레임워크(8) - LectureSample project 개발(2)</a></li>


</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Project 설계</strong></p>

<p>우리가 예제로 개발한 application은 설문에 해당하는 질문을 보여준 후 질문에 
포함되어 있는 답변 항목에 투표하면 그 결과를 알려주는 프로그램입니다.</p>

<p>이를 위해 3개의 page개발이 필요하면 다음과 같은 화면으로 구현할 것입니다.</p>

<p><img src="assets/built/images/django-sample-ui.png" alt="sample-ui" /></p>

<ul>
  <li>index.html : 질문의 리스트를 보여줍니다.</li>
  <li>detail.html : 하나의 질문에 대해 투표할 수 있도록 답변 항목을 폼으로 보여줍니다.</li>
  <li>results.html : 질문에 따른 투표 결과를 보여줍니다.</li>
</ul>

<p>다음은 필요한 테이블에 대한 설계입니다.</p>

<p><img src="assets/built/images/django-sample-table.png" alt="sample-table" /></p>

<p>다음에 살펴볼것은 프로젝트의 뼈대입니다.</p>

<p>일단 프로젝트의 구성과 해당 파일의 역할에 대해서 알아보고 프로젝트 뼈대를
구성하는 코드를 실행해보도록 하겠습니다.</p>

<p><img src="assets/built/images/django-sample-structure.png" alt="sample-structure" /></p>

<ul>
  <li>
    <p>최상위 디렉토리 : 프로젝트 관련 디렉토리 및 파일을 모아주는 최상위 루트 디렉토리입니다.
보통 settings.py 파일의 BASE_DIR 항목으로 지정됩니다.</p>
  </li>
  <li>
    <p>db.sqlite3 : SQLite3 데이터베이스 파일입니다. 테이블이 포함되어있습니다.</p>
  </li>
  <li>
    <p>manage.py : 장고의 명령어를 처리하는 파일입니다.</p>
  </li>
  <li>
    <p>mysite 디렉토리 : 프로젝트명으로 만들어진 디렉토리입니다. 프로젝트 관련 파일들이 
들어갑니다.</p>
  </li>
  <li>
    <p>settings.py : 프로젝트 설정 파일입니다.</p>
  </li>
  <li>
    <p>urls.py : 프로젝트 레벨의 URL 패턴을 정의하는 최상위 URLConf 파일입니다.
보통은 Application 디렉토리마다 하위 urls.py 파일이 또 존재합니다.</p>
  </li>
  <li>
    <p>wsgi.py : Apache와 같은 웹서버와 WSGI 규격으로 연동하기 위한 파일입니다.</p>
  </li>
  <li>
    <p>polls 디렉토리 : application명으로 만들어진 Application 디렉토리입니다.
해당 application 관련 파일들이 들어갑니다.</p>
  </li>
  <li>
    <p>admin.py : Admin site에 모델 클래스를 등록해주는 파일입니다.</p>
  </li>
  <li>
    <p>apps.py : Application의 설정 클래스를 정의하는 파일입니다.</p>
  </li>
  <li>
    <p>migrations 디렉토리 : 데이터베이스 변경사항을 관리하기 위한 디렉토리입니다. 
데이터베이스에 추가, 삭제, 변경등이 발생하면 변경 내역을 기록한 파일들이 위치합니다.</p>
  </li>
  <li>
    <p>models.py : 데이터베이스 모델 클래스를 정의하는 파일입니다.</p>
  </li>
  <li>
    <p>views.py : View 함수를 정의하는 파일입니다. 함수형 View 및 클래스형 View 모두 이
파일에 정의합니다.</p>
  </li>
  <li>
    <p>template 디렉토리 : template 파일들이 들어있습니다. 프로젝트 레벨과 application 레벨의
템플릿으로 구분합니다.</p>
  </li>
  <li>
    <p>static 디렉토리 : CSS, image, JavaScript 파일들이 들어있습니다. 이 역시 프로젝트 레벨과
application 레벨로 구분하며 static이라는 이름으로 디렉토리를 생성합니다.</p>
  </li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Project Setup</strong></p>

<p>시작은 프로젝트의 뼈대를 만드는 일부터 시작합니다. 프로젝트에 필요한
디렉토리 및 파일을 구성하고 설정 파일을 세팅하도록 하겠습니다.</p>

<p>간단하게 <code class="highlighter-rouge">C:/python-Django</code> 폴더를 하나 생성한 후 command창을 열어서
다음과 같이 입력해서 프로젝트를 시작합니다.</p>

<blockquote>
  <p><strong>C:/Users/moon9342&gt; cd C:/python-Django</strong></p>
</blockquote>

<blockquote>
  <p><strong>C:/python-Django&gt; django-admin startproject mysite</strong></p>
</blockquote>

<p>생성된 폴더 구조를 보면 <code class="highlighter-rouge">C:/python-Django/mysite</code> 가 생성되고 그 아래에 다시
<code class="highlighter-rouge">C:/python-Django/mysite/mysite</code> 폴더가 생성되게 됩니다.</p>

<p>여기서 상위 폴더인 <code class="highlighter-rouge">C:/python-Django/mysite</code> 폴더는 단순히 프로젝트 관련파일과
폴더를 모아놓은 폴더이기 때문에 다른 이름으로 변경할 것입니다. 하위 폴더인
<code class="highlighter-rouge">C:/python-Django/mysite/mysite</code> 폴더가 우리의 프로젝트 디렉토리 입니다.</p>

<blockquote>
  <p><strong>C:/python-Django&gt; move mysite MyFirstWebPoll</strong></p>
</blockquote>

<p>이름을 변경한 후 해당 폴더로 이동합니다. 그리고 그 안에 <code class="highlighter-rouge">polls</code>라는 application을
생성하는 명령을 입력합니다.</p>

<blockquote>
  <p><strong>C:/python-Django&gt; cd C:/python-Django/MyFirstWebPoll</strong></p>
</blockquote>

<blockquote>
  <p><strong>C:/python-Django/MyFirstWebPoll&gt; python manage.py startapp polls</strong></p>
</blockquote>

<p>이 과정을 거치면 <code class="highlighter-rouge">polls</code>라는 이름의 application 디렉토리와 그 하위에 필요한 파일들을
자동으로 생성해 줍니다. 파일 이름은 Django가 알아서 설정하게 되는데 이렇게 개발에 반드시
필요한 파일들은 Django가 알아서 생성해주고 개발자는 그 내용을 채워넣는 식으로 진행됩니다.</p>

<p><strong class="subtitle2_fontAwesome">Project 설정파일 변경</strong></p>

<p>프로젝트에 필요한 설정값은 <code class="highlighter-rouge">settings.py</code> 파일에 지정합니다.</p>

<p>지금부터는 PyCharm을 이용하기로 하죠.</p>

<ul>
  <li><code class="highlighter-rouge">ALLOWED_HOSTS</code> : Django는 <code class="highlighter-rouge">DEBUG=True</code>이면 개발모드로 False이면 운영모드로
인식합니다. 운영 모드인 경우 ALLOWED_HOSTS에는 반드시 서버의 IP나 Domain을 지정해야 합니다.
개발모드인 경우에는 값을 지정하지 않으면 <code class="highlighter-rouge">['localhost','127.0.0.1']</code>로 간주됩니다.
지금은 개발모드 이기 때문에 <code class="highlighter-rouge">['localhost','127.0.0.1']</code>로 설정합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">ALLOWED_HOSTS</span> <span class="o">=</span> <span class="p">[</span><span class="s">'localhost'</span><span class="p">,</span> <span class="s">'127.0.0.1'</span><span class="p">]</span>

</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">INSTALLED_APPS</code> : 프로젝트에 포함되는 application들은 모두 설정 파일에 등록되어야 합니다.
따라서 우리가 개발하고 있는 <code class="highlighter-rouge">polls</code> application도 등록해야 되겠죠. 일반적으로 application의
설정 클래스로 등록하게 됩니다.  <code class="highlighter-rouge">polls</code> application의 설정 클래스는 자동으로 생성된 <code class="highlighter-rouge">apps.py</code>
파일안에 <code class="highlighter-rouge">PollsConfig</code>라고 정의되어 있습니다. 이 부분을 <code class="highlighter-rouge">INSTALLED_APPS</code>에 추가합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
    <span class="s">'polls.apps.PollsConfig'</span>
<span class="p">]</span>

</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">DATABASES</code> : 프로젝트에 사용할 데이터베이스 엔진입니다. Django는 default로
SQLite3 데이터 베이스 엔진을 사용하도록 설정되어 있습니다. 이번에는 SQLite3를 사용하고
다음 예제에서는 MariaDB를 사용하도록 하겠습니다. 따라서 이번에는 설정을 변경하지 않겠습니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'default'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'ENGINE'</span><span class="p">:</span> <span class="s">'django.db.backends.sqlite3'</span><span class="p">,</span>
        <span class="s">'NAME'</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">'db.sqlite3'</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">TIME_ZONE</code> : 마지막은 타임존 지정입니다. <code class="highlighter-rouge">UTC</code>(세계표준시)로 되어 있는 부분을
한국 시간으로 변경합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">TIME_ZONE</span> <span class="o">=</span> <span class="s">'Asia/Seoul'</span>

</code></pre></div></div>

<p><strong class="subtitle2_fontAwesome">기본 테이블 생성</strong></p>

<p>기본 테이블을 생성하기 위해서 다음의 명령을 실행합니다.</p>

<blockquote>
  <p><strong>C:/python-Django/MyFirstWebPoll&gt; python manage.py migrate</strong></p>
</blockquote>

<p><code class="highlighter-rouge">migrate</code> 명령은 데이터베이스에 변경 사항이 있을 때 이를 반영해 주는 명령어 입니다.
Django는 모든 웹 프로젝트 개발 시 반드시 사용자와 그룹 테이블 등이 필요하다는 가정하에
설계되었습니다. 따라서 우리가 현 시점에서 Database를 전혀 사용하지 않는다 할지라도 
사용자 및 그룹 테이블등을 만들어 주어야 합니다.</p>

<p>정상적으로 실행되면 <code class="highlighter-rouge">db.slqite3</code> 파일이 생성되게 됩니다.</p>

<p><strong class="subtitle2_fontAwesome">서버 기동</strong></p>

<p>기본적인 작업을 수행했으니 이제 제공된 테스트용 웹 서버를 이용해서 우리 프로젝트를
<code class="highlighter-rouge">deploy</code>해 보겠습니다.</p>

<blockquote>
  <p><strong>C:/python-Django/MyFirstWebPoll&gt; python manage.py runserver</strong></p>
</blockquote>

<p>만약 IP와 Port를 지정하지 않으면 default로 127.0.0.1:8000으로 실행됩니다. 
IP와 Port를 지정하시려면 다음과 같이 수행하면 됩니다.</p>

<blockquote>
  <p><strong>C:/python-Django/MyFirstWebPoll&gt; python manage.py runserver 0.0.0.0:8888</strong></p>
</blockquote>

<p>서버를 기동하고 웹 브라우져로 접속해보죠. 화면이 잘 나오나요??</p>

<p><img src="../../assets/built/images/python-django-welcome.png" alt="python django welcome" /></p>

<p><strong class="subtitle2_fontAwesome">Admin site 접속</strong></p>

<p>Django에서 제공하는 기본적인 Admin site에 접속해서 Table이 생성된 것을 확인해 보도록
하겠습니다. 사용할 url은 <code class="highlighter-rouge">http://127.0.0.1:8000/admin</code> 입니다.</p>

<p>로그인을 하려면 Username, Password를 입력해야 하는데 아직 생성하지 않았습니다. Admin
site에 로그인하기 위해 관리자계정을 하나 생성합니다.</p>

<blockquote>
  <p><strong>C:/python-Django/MyFirstWebPoll&gt; python manage.py createsuperuser</strong></p>
</blockquote>

<p><img src="../../assets/built/images/python-django-createsuperuser.png" alt="python django createsuperuser" /></p>

<p>이렇게 생성된 Username, Password를 이용하여 admin site에 접속해서 현재 생성되어 있는
<code class="highlighter-rouge">Groups</code>, <code class="highlighter-rouge">Users</code> 테이블을 확인합니다. 사실 이 테이블이 존재하는 이유는 <code class="highlighter-rouge">settings.py</code>에
<code class="highlighter-rouge">django.contrib.auth</code> application이 등록되어 있기 때문입니다. Django에서 기본적으로 제공하는
application에 Users와 Groups Table이 미리 정의되어 있었다는 얘기입니다.</p>

<p>기본적인 프로젝트의 뼈대를 세우고 환경설정파일을 살짝 수정한 후 테스트 웹서버를 이용해서
우리 웹 프로젝트를 deploy까지 진행해봤습니다. 이제 Poll Application을 하나씩 순차적으로 
작성해 보도록 하겠습니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Python 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.python.org/" target="_blank">Python Official HomePage</a></li>
    <li>점프 투 파이썬 - 이지스 퍼블리싱</li>
    <li>전문가를 위한 파이썬(Fluent Python) - 한빛미디어</li>
    <li>파이썬 웹 프로그래밍 - 한빛미디어</li>
    <li>이미지 출처 : <a href="http://www.freepik.com" target="_blank">Designed by rawpixel.com / Freepik</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Python Django 웹 프레임워크(1) - introduction</title>
	  <link>https://moon9342.github.io/python-lecture-python-django-introduction</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-05-02T01:40:00+09:00</pubDate>
	  <guid>https://moon9342.github.io/python-lecture-python-django-introduction</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Python 기초강의는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./python-lecture-python-introduction">Python 기초강의(1) - Introduction</a></li>
    <li><a href="./python-lecture-python-basic">Python 기초강의(2) - Python 기본</a></li>
    <li><a href="./python-lecture-python-control-statement">Python 기초강의(3) - Python 제어문</a></li>
    <li><a href="./python-lecture-python-function">Python 기초강의(4) - Python function</a></li>
    <li><a href="./python-lecture-python-program-exercise-1">Python 기초강의(5) - Python 연습문제(1)</a></li>
    <li><a href="./python-lecture-python-OOP">Python 기초강의(6) - Python 객체지향</a></li>
    <li><a href="./python-lecture-python-magic-function">Python 기초강의(7) - Python Magic Function</a></li>
    <li><a href="./python-lecture-python-first-class">Python 기초강의(8) - Python First Class</a></li>
    <li><a href="./python-lecture-python-closure">Python 기초강의(9) - Python Closure</a></li>
    <li><a href="./python-lecture-python-decorator">Python 기초강의(10) - Python Decorator</a></li>
    <li><a href="./python-lecture-python-generator">Python 기초강의(11) - Python Generator</a></li>
    <li><a href="./python-lecture-python-module">Python 기초강의(12) - Python Module</a></li>
    <li><a href="./python-lecture-python-exception">Python 기초강의(13) - Python Exception &amp; File</a></li>
    <li><a href="./python-lecture-python-oop-exercise">Python 기초강의(14) - Python 연습문제(2)</a></li>
    <li><a href="./python-lecture-python-web-basic-jquery">Web basic &amp; jQuery(Front End Web Application)</a></li>
    <li><a href="./python-lecture-python-django-introduction">Python Django 웹 프레임워크(1) - introduction</a></li>
    <li><a href="./python-lecture-python-django-poll-project-1">Python Django 웹 프레임워크(2) - Poll project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-2">Python Django 웹 프레임워크(3) - Poll project 개발(2)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-3">Python Django 웹 프레임워크(4) - Poll project 개발(3)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-4">Python Django 웹 프레임워크(5) - Poll project 개발(4)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-5">Python Django 웹 프레임워크(6) - Poll project 개발(5)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_1">Python Django 웹 프레임워크(7) - LectureSample project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_2">Python Django 웹 프레임워크(8) - LectureSample project 개발(2)</a></li>


</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Web introduction</strong></p>

<p><code class="highlighter-rouge">Django</code>에 대해서 알아보기전에 기본적인 몇가지 개념부터 살펴보기로 하겠습니다.</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">Web Server</code> : 인터넷을 통해 요청된 web contents의 전달을 도와주는 하드웨어와
소프트웨어를 지칭합니다. 일반적으로 정적 resource에 대한 요청을 처리하며 Web Server가
관장하는 resource를 그대로 보내주는 역할을 수행합니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">CGI(Common Gateway Interface)</code> : Web Server에서 Application을 수행시키기위한
규약입니다. 정적 기능을 하는 Web Server가 동적인 프로그램을 수행시키기 위한 목적으로
만들어졌다고 생각하시면 됩니다. 클라이언트의 요청을 웹서버(Apache, NginX)가 받고
웹서버가 직접 프로그램을 실행시키는 구조입니다. 대표적인 구현 프로그래밍 언어로는 C, Perl
등이 있습니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">WAS(Web Application Server)</code> : 일반적으로 Web Server와 Web Application을
동작시킬 수 있는 Web Container로 구성되며 클라이언트의 요청을 웹서버(Apache, NginX)가
받고 Web Server가 수행할 수 없는 요청이기 때문에 WAS(Tomcat, JBoss)에게로 request를
전달하면 WAS가 프로그램을 실행하는 구조입니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">WSGI</code>는 python에 종속된 개념입니다. python에서 python script(Web Application)이 
Web Server와 통신하기 위한 interface(규약)입니다.
클라이언트의 요청을 웹서버(Apache, NginX)가 받고 이를 WSGI Server(middleware)로 
request를 전달하면 WSGI Server가 WSGI를 지원하는 Web Application(Django, flask)을
실행시키는 구조입니다. WSGI middleware는 WSGI 규약의 구현체라고 볼 수 있는데 아래의 
그림과 같은 구조로 생각하면 됩니다. 아래의 그림에서 녹색부분이 결국 WAS이고 파란색으로 
되어 있는 두 부분을 합쳐서 WSGI middleware라고 합니다. 하나로 구성된 것이 아니라 일부는 
Web Server에 내장되어있고 일부는 프로세스로 띄워진 형태입니다. 이런 WSGI middleware의 
종류는 mod_wsgi, Gunicorn, uWSGI등이 있습니다.</p>
  </li>
</ul>

<p><img src="assets/built/images/wsgi_structure.png" alt="WSGI" /></p>

<hr />

<p><strong class="subtitle_fontAwesome">Django introduction</strong></p>

<p><code class="highlighter-rouge">Django</code>는 Python으로 만들어진 무료 오픈소스 웹 애플리케이션 프레임워크(web application framework)입니다.</p>

<p>우리는 Web Application을 개발할 때 굉장히 빈번하게 반복적인 문제를 해결해야 될 때가 많습니다. 
사용자들의 회원가입, 로그인, 로그아웃 등의 사용자 인증 및 관리에 대한 구현 혹은 게시판과 같이 
사용자들이 커뮤니케이션을 할 수 있는 공간과 파일 업로드, 다운로드를 할 수 있도록 하는 
기능 구현등이 이에 해당합니다.</p>

<p>우리가 아는 거의 모든 웹 페이지들은 이러한 기능들을 기본적으로 제공합니다. 
이러한 기능들을 구현할 때 편리한 개발환경을 만들어 놓은 것이 바로 프레임워크라고 생각하시면 됩니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Django 특징</strong></p>

<ul>
  <li>
    <p>MVC pattern 기반의 <code class="highlighter-rouge">MVT</code></p>

    <p>Django는 <code class="highlighter-rouge">MVC(Model-View-Controller)</code>기반의 Framework입니다. 
하지만 기존의 View의 개념을 Template이 수행하고 Controller의 역할을 View가 수행합니다. 
그래서 Django를 <code class="highlighter-rouge">MVT(Model-View-Template)</code> Framework이라고 부르기도 합니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">ORM</code>(Object Relational Mapping - 객체관계매핑)</p>

    <p>Django의 ORM은 데이터베이스 시스템과 데이터 모델 class를 연결시키는 역할을 수행합니다.
데이터베이스 테이블은 결국 데이터 모델 class와 매핑되며 각각의 record는 
class의 instance로 표현되게 됩니다. 이런 객체를 우리가 제어하면 Database의 내용을 
제어할 수 있게 됩니다. ORM의 장점 중 하나는 이미 구축한 데이터베이스 시스템을 다른 
데이터베이스로 변경하는 경우에 설정만 변경하면 바로 새로운 Database에 우리의 시스템을 
적용할 수 있다는 것입니다.</p>
  </li>
  <li>
    <p>자동으로 구성되는 관리자 화면</p>

    <p>Django는 프로젝트를 시작하는 시점에 기본기능으로 관리자 화면을 제공합니다. 
이런 관리자 화면을 이용하여 Application에서 사용하는 데이터들을 쉽게 생성하거나 
변경할 수 있으며 개발자가 별도로 관리 기능을 개발할 필요가 없습니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">Elegant URL</code></p>

    <p>웹 프로그래밍에서 URL design은 필수적인 작업인데 Django는 이런 URL design을
직관적이고 쉽게 할 수 있습니다. 이 방식을 Elegant URL이라고 합니다.</p>
  </li>
  <li>
    <p>자체 Template 시스템</p>

    <p>Django는 내부적으로 확장이 가능하고 디자인이 쉬운 강력한 Template 시스템을 가지고 
있습니다. 이를 이용하면 HTML과 같은 언어를 좀 더 쉽게 다룰 수 있습니다.</p>
  </li>
  <li>
    <p>Cache 시스템</p>

    <p>내부적으로 자주 사용하는 내용을 저장해 두었다가 재사용하여 성능을 높이는 기능입니다.</p>
  </li>
  <li>
    <p>소스 변경사항 자동반영</p>

    <p>Django에서는 .py 파일의 변경 여부를 감시하고 있다가 변경이 되면 변경 내역을 바로
반영해 주기 때문에 웹 서버를 다시 시작할 필요 없이 개발을 할 수 있습니다.</p>
  </li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Django 설치</strong></p>

<p>Windows 10을 기준으로 다음과 같이 <code class="highlighter-rouge">pip</code>(python install package)를 이용하여
<code class="highlighter-rouge">PyPI</code>(Python Package Index)에 있는 SW package를 설치하면 됩니다.
만약 anaconda환경이면 base 환경에 conda 명령을 이용하여 설치해도 됩니다.</p>

<blockquote>
  <p><code class="highlighter-rouge">conda install django</code></p>
</blockquote>

<p>djnago의 설치 디렉토리를 알고 싶다면 다음의 코드를 실행하면 됩니다.</p>

<blockquote>
  <p><code class="highlighter-rouge">python -c "import django; print(django.__path__)"</code></p>
</blockquote>

<p>또한 Django는 python환경에서 동작하는 package이므로, Django가 정상적으로
설치되었는지를 확인하려면 다음과 같은 명령을 이용하면 됩니다.</p>

<blockquote>
  <p><code class="highlighter-rouge">python -m django --version</code></p>
</blockquote>

<p>일반적인 python환경에서는 다음과 같이 pip 명령을 이용하여 설치하면 됩니다.</p>

<blockquote>
  <p><code class="highlighter-rouge">pip install Django</code></p>
</blockquote>

<p>원래는 Django의 Application개발 방식에 대한 설명을 해야 합니다. 
MVT 방식에 대한 이해라던지 URLConf 처리 순서, Model, View, Template의 동작원리와 
동작순서같은 것들 말이죠.<br />
처음 Django를 접하거나 아예 웹 프로그래밍을 접해보지 않은 사람들에게는 사실 너무 어려운
내용이기는 합니다. 하지만 기본적인 개념을 알고 시작하는것이 좋기 때문에 간단하게나마
설명을 하고 그 후에 조금 쉽게 풀어가기 위해 간단한 Application을 하나 만들어 가면서 
부가적으로 설명을 곁들이는 방식으로 진행하겠습니다.</p>

<p>일단 먼저 용어부터 정리하고 들어가야 할 듯 합니다. Django에서는 우리가 구현하는
웹 어플리케이션을 다른 Framework에 비해 조금 더 구체적으로 명시하고 있습니다.</p>

<p>다른 언어(예를 들면 Java Servlet)에서는 전체 프로그램을 Web Application이라고 부릅니다.
하지만 Django에서는 약간 다르게 표현합니다. Django에서는 웹 사이트(웹 어플리케이션)에 
대한 전체 프로그램을 <code class="highlighter-rouge">Project</code>(프로젝트)라고 합니다. 
그리고 모듈화된 단위 프로그램들을 <code class="highlighter-rouge">Application</code>(어플리케이션)이라고 부릅니다. 즉,
Application들이 모여서 Project를 개발하는 개념으로 이해하시면 됩니다.</p>

<p><strong class="subtitle2_fontAwesome">MVT Pattern</strong></p>

<p>일반적으로 application을 개발할 때 흔히 사용하는 구조는 <code class="highlighter-rouge">MVC</code> pattern입니다.
MVC pattern은 프로그램의 구성 요소를 <code class="highlighter-rouge">Model-View-Controller</code>로 구분해 한 요소가
다른 요소에 미치는 영향을 최소화 하도록 설계하는 방식을 의미합니다.</p>

<p>Django도 이런 MVC pattern 개념을 그대로 받아들여서 사용합니다. 단, MVC pattern에서의
View를 <code class="highlighter-rouge">Template</code>으로 Controller를 <code class="highlighter-rouge">View</code>라고 표현하며 이를 <code class="highlighter-rouge">MVT</code> pattern이라고 합니다.</p>

<p>장고의 MVT pattern을 그림을 묘사하면 아래와 같습니다.</p>

<p><img src="assets/built/images/python-django-mvt.png" alt="python django MVT" /></p>

<p>웹 클라이언트로부터 요청을 받고, Django에서 MVT pattern에 따라서 처리하는 과정을 
개념적으로 살펴보면 다음과 같습니다.</p>

<ul>
  <li>클라이언트로부터 요청을 받으면 <code class="highlighter-rouge">URLConf</code>를 이용하여 URL을 분석합니다.</li>
  <li>URL 분석 결과를 통해 해당 URL에 대한 처리를 담당한 <code class="highlighter-rouge">View</code>를 결정합니다.</li>
  <li>View는 자신의 로직을 실행하면서 데이터베이스 처리가 필요하면 <code class="highlighter-rouge">Model</code>을 통해 처리합니다.</li>
  <li>View는 로직처리가 끝나면 <code class="highlighter-rouge">Template</code>을 사용하여 클라이언트에게 전송할 HTML 파일을 생성합니다.</li>
  <li>View는 최종결과로 HTML 파일을 클라이언트에게 전송합니다.</li>
</ul>

<p><strong class="subtitle2_fontAwesome">Model</strong></p>

<p>Model은 사용될 데이터에 대한 정의를 담고 있는 Django의 class입니다. Django는 <code class="highlighter-rouge">ORM</code> 기법을
사용하여 데이터베이스를 class로 mapping해서 사용할 수 있습니다. 쉽게 말하면 하나의 Model class는
하나의 Table에 mapping되고 Model class의 속성은 Table의 column에 mapping됩니다.</p>

<p>이런 ORM기법을 이용하면 Application에서는 데이터베이스에 대한 access를 
SQL없이도 class를 다루는 것으로 할 수 있습니다. 이러한 Model class는 
<code class="highlighter-rouge">models.py</code> 파일에 저장하게 됩니다.</p>

<p>장점은 무엇일까요?</p>

<p>ORM을 이용하면 Database에 대한 처리를 SQL없이 class를 다루는 것처럼 할 수 있어서 편리합니다.
또한 Database Engine을 바꾸어도 ORM을 통한 API는 변경할 필요가 없습니다.</p>

<p>간단한 예로 아래의 Model class를 예로 들어보죠</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>

</code></pre></div></div>

<p>위의 Model class의 정의는 내부적으로 다음의 SQL 명령을 사용하여 Database Table을
생성하게 됩니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">myapp_person</span> <span class="p">(</span>
    <span class="nv">"id"</span> <span class="n">serial</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
    <span class="nv">"first_name"</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="nv">"last_name"</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span>

</code></pre></div></div>

<ul>
  <li>
    <p>위에서 보듯이 Table명은 application명과 Model class명을 <code class="highlighter-rouge">_</code> 로 연결하고 모두 소문자로
표현합니다. 다른 이름으로 직접 지정할 수 도 있습니다.</p>
  </li>
  <li>
    <p>PRIMARY KEY는 Person class에서 지정하지 않아도 Django에서 자동으로 부여합니다. 이 부분
역시 직접 지정할 수 도 있습니다.</p>
  </li>
</ul>

<p><strong class="subtitle2_fontAwesome">URLConf</strong></p>

<p>클라이언트로부터 요청을 받으면 Django는 가장 먼저 요청에 들어 있는 URL을 분석합니다. 즉,
URL이 <code class="highlighter-rouge">urls.py</code> 파일에 정의된 URL pattern과 매칭되는지를 분석한다는 거죠.</p>

<p>Python의 URL 정의 방식을 Elegant URL이라고 부릅니다. 기존 다른 언어의 URL 정의방식보다
쉽고 직관적이기 때문입니다.</p>

<p>URL을 정의하기 위해서는 <code class="highlighter-rouge">urls.py</code> 파일에 URL과 View 함수를 매핑하는 코드를 작성해야 합니다.
이를 <code class="highlighter-rouge">URLConf</code> 라고 합니다. 아래는 예제로 작성된 <code class="highlighter-rouge">urls.py</code>입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'articles/2003/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">special_case_2003</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'articles/&lt;int:year&gt;/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">year_archive</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'articles/&lt;int:year&gt;/&lt;int:month&gt;/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">month_archive</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/'</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">article_detail</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div></div>

<p>웹 클라이언트가 웹 서버에 Request를 보낼 때, Django에서 URL을 분석하는 순서를 보면
다음과 같습니다.</p>

<ul>
  <li><code class="highlighter-rouge">settings.py</code> 파일의 <code class="highlighter-rouge">ROOT_URLCONF</code> 항목을 읽어서 최상위 URLConf 파일의 위치를 알아냅니다.</li>
  <li>URLConf를 로딩하여 URL list를 검사합니다.</li>
  <li>검사 순서는 위에서부터 순서대로 URL list를 검사하며 URL pattern이 매치되면 검사를 종료합니다.</li>
  <li>매치된 View 함수를 호출합니다. 호출 시 HttpRequest객체와 URL에서 추출된 데이터를 View 함수에
인자로 넘겨줍니다.</li>
  <li>URL list 끝가지 검사했는데도 매칭에 실패하면 에러를 처리하는 View 함수를 호출합니다.</li>
</ul>

<p>여기서 주의해야 할 부분은 <code class="highlighter-rouge">&lt;int:month&gt;</code> 처럼 꺽쇠를 사용하는 부분입니다. 이는 URL 에서 일부
데이터를 추출하기 위한 것으로 <code class="highlighter-rouge">&lt;type:name&gt;</code> 형태로 사용합니다. 만약 요청 URL이
<code class="highlighter-rouge">/articles/2020/</code>이라면 호출되는 View 함수는 <code class="highlighter-rouge">view.year_archive(request,year=2020)</code> 처럼
호출합니다.</p>

<p>이런 꺽쇠 부분을 Django에서는 <code class="highlighter-rouge">Path Converter</code>라고 부릅니다. 여기에서 사용되는 타입은
<code class="highlighter-rouge">str</code>, <code class="highlighter-rouge">int</code>, <code class="highlighter-rouge">slug</code>, <code class="highlighter-rouge">path</code> 등이 있습니다.</p>

<ul>
  <li><code class="highlighter-rouge">str</code> : <code class="highlighter-rouge">/</code>를 제외한 모든 문자열과 매치됩니다. 타입이 지정되지 않으면 default로 str입니다.</li>
  <li><code class="highlighter-rouge">int</code> : 0 또는 양의 정수와 매치됩니다.</li>
  <li><code class="highlighter-rouge">slug</code> : slug형식의 문자열과 매치됩니다. (ASCII, 숫자, 하이픈, 밑줄)</li>
  <li><code class="highlighter-rouge">path</code> : <code class="highlighter-rouge">/</code>를 포함한 모든 문자열과 매치됩니다. 이는 URL의 일부가 아니라 전체를 추출하고자
할때 사용됩니다.</li>
</ul>

<p>또한 <code class="highlighter-rouge">Regular Expression</code>(정규 표현식)을 사용해서 URL을 좀 더 세밀하게 표현 할 수 도 있습니다.
이 부분은 책이나 다른 문서를 참조하세요~</p>

<p><strong class="subtitle2_fontAwesome">View</strong></p>

<p>View는 일반적으로 Request를 받아서 Database 처리 등 로직에 맞는 처리를 하고, 그 결과
데이터를 HTML로 변환하기 위해서 Template 처리를 한 후 최종 HTML로 된 응답 데이터를 웹
클라이언트에게 반환하는 역할을 수행합니다.</p>

<p>일반적으로 <code class="highlighter-rouge">views.py</code> 파일에 작성되며 다른 파일에 작성해도 상관은 없습니다.</p>

<p>간단한 예로 현재의 날짜와 시간을 HTML로 반환해주는 View 함수는 다음과 같습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
<span class="kn">import</span> <span class="nn">datetime</span>

<span class="k">def</span> <span class="nf">current_datetime</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">now</span> <span class="o">=</span> <span class="n">datatime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
    <span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;html&gt;&lt;body&gt;현재 시각은 : </span><span class="si">%</span><span class="s">s&lt;/body&gt;&lt;/html&gt;"</span> <span class="o">%</span> <span class="n">now</span>
    <span class="k">return</span> <span class="n">httpResponse</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>

</code></pre></div></div>

<p>만약 Error를 반환하고 싶다면 아래처럼 <code class="highlighter-rouge">HttpResponseNotFound</code>와 같은
에러 응답 객체를 반환하면 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">return</span> <span class="n">HttpResponseNotFound</span><span class="p">(</span><span class="s">"&lt;h1&gt;페이지를 찾을 수 없습니다.&lt;/h1&gt;"</span><span class="p">)</span>

</code></pre></div></div>

<p><strong class="subtitle2_fontAwesome">Template</strong></p>

<p>Django가 클라이언트에게 반환하는 최종 응답은 HTML text입니다. 개발자가
응답에 사용할 html 파일을 작성하면, 장고는 이를 해석해서 데이터를 적용해
최종 HTML text를 생성하고 이를 클라이언트에게 보내주게 됩니다.</p>

<p>이런 과정에서 개발자가 작성하는 html 파일을 <code class="highlighter-rouge">Template</code> 파일이라고 부릅니다.</p>

<p>Template file은 <code class="highlighter-rouge">.html</code> 확장자를 가지며 Django의 Template 시스템 문법에 맞게
작성합니다. 조심해야 할 사항은 이 Template 파일을 적절한 디렉토리에 위치시켜야
한다는 점 입니다.</p>

<p>Django에서 Template 파일을 찾을 때 <code class="highlighter-rouge">TEMPLATE_DIRS</code> 와 <code class="highlighter-rouge">INSTALLED_APPS</code>에서 지정된
application의 디렉토리를 검색합니다. 이 항목들은 <code class="highlighter-rouge">settings.py</code>에 지정되어 있습니다.</p>

<p>우리의 첫번째 Project는 <code class="highlighter-rouge">파이썬 웹 프로그래밍(한빛미디어)</code> 책에서 소개된 Poll project입니다.</p>

<p>그럼 다음 절에서 천천히 시작해 보도록 하죠.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Python 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.python.org/" target="_blank">Python Official HomePage</a></li>
    <li>점프 투 파이썬 - 이지스 퍼블리싱</li>
    <li>전문가를 위한 파이썬(Fluent Python) - 한빛미디어</li>
    <li>파이썬 웹 프로그래밍 - 한빛미디어</li>
    <li>이미지 출처 : <a href="http://www.freepik.com" target="_blank">Designed by rawpixel.com / Freepik</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Web basic & jQuery(Front End Web Application)</title>
	  <link>https://moon9342.github.io/python-lecture-python-web-basic-jquery</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-04-02T01:40:00+09:00</pubDate>
	  <guid>https://moon9342.github.io/python-lecture-python-web-basic-jquery</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Python 기초강의는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./python-lecture-python-introduction">Python 기초강의(1) - Introduction</a></li>
    <li><a href="./python-lecture-python-basic">Python 기초강의(2) - Python 기본</a></li>
    <li><a href="./python-lecture-python-control-statement">Python 기초강의(3) - Python 제어문</a></li>
    <li><a href="./python-lecture-python-function">Python 기초강의(4) - Python function</a></li>
    <li><a href="./python-lecture-python-program-exercise-1">Python 기초강의(5) - Python 연습문제(1)</a></li>
    <li><a href="./python-lecture-python-OOP">Python 기초강의(6) - Python 객체지향</a></li>
    <li><a href="./python-lecture-python-magic-function">Python 기초강의(7) - Python Magic Function</a></li>
    <li><a href="./python-lecture-python-first-class">Python 기초강의(8) - Python First Class</a></li>
    <li><a href="./python-lecture-python-closure">Python 기초강의(9) - Python Closure</a></li>
    <li><a href="./python-lecture-python-decorator">Python 기초강의(10) - Python Decorator</a></li>
    <li><a href="./python-lecture-python-generator">Python 기초강의(11) - Python Generator</a></li>
    <li><a href="./python-lecture-python-module">Python 기초강의(12) - Python Module</a></li>
    <li><a href="./python-lecture-python-exception">Python 기초강의(13) - Python Exception &amp; File</a></li>
    <li><a href="./python-lecture-python-oop-exercise">Python 기초강의(14) - Python 연습문제(2)</a></li>
    <li><a href="./python-lecture-python-web-basic-jquery">Web basic &amp; jQuery(Front End Web Application)</a></li>
    <li><a href="./python-lecture-python-django-introduction">Python Django 웹 프레임워크(1) - introduction</a></li>
    <li><a href="./python-lecture-python-django-poll-project-1">Python Django 웹 프레임워크(2) - Poll project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-2">Python Django 웹 프레임워크(3) - Poll project 개발(2)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-3">Python Django 웹 프레임워크(4) - Poll project 개발(3)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-4">Python Django 웹 프레임워크(5) - Poll project 개발(4)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-5">Python Django 웹 프레임워크(6) - Poll project 개발(5)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_1">Python Django 웹 프레임워크(7) - LectureSample project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_2">Python Django 웹 프레임워크(8) - LectureSample project 개발(2)</a></li>


</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Web Basic &amp; jQuery(Front End Web Application)</strong></p>

<p>Django를 들어가기 전에 Web에 대한 기본적인 내용과 jQuery를 이용한 동적 Web Page Handling에 대해서 
알아보도록 하겠습니다.</p>

<p>이 단원에 대한 내용은 기존에 강의에서 사용했던 슬라이드를 이용합니다.</p>

<p><a href="/assets/downloads/web_jquery.pdf" target="_blank">HTML &amp; jQuery</a></p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Python 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.python.org/" target="_blank">Python Official HomePage</a></li>
    <li>점프 투 파이썬 - 이지스 퍼블리싱</li>
    <li>전문가를 위한 파이썬(Fluent Python) - 한빛미디어</li>
    <li>파이썬 웹 프로그래밍 - 한빛미디어</li>
    <li>이미지 출처 : <a href="http://www.freepik.com" target="_blank">Designed by rawpixel.com / Freepik</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Python 기초강좌(14) - Python 연습문제(2)</title>
	  <link>https://moon9342.github.io/python-lecture-python-oop-exercise</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-03-15T01:40:00+09:00</pubDate>
	  <guid>https://moon9342.github.io/python-lecture-python-oop-exercise</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Python 기초강의는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./python-lecture-python-introduction">Python 기초강의(1) - Introduction</a></li>
    <li><a href="./python-lecture-python-basic">Python 기초강의(2) - Python 기본</a></li>
    <li><a href="./python-lecture-python-control-statement">Python 기초강의(3) - Python 제어문</a></li>
    <li><a href="./python-lecture-python-function">Python 기초강의(4) - Python function</a></li>
    <li><a href="./python-lecture-python-program-exercise-1">Python 기초강의(5) - Python 연습문제(1)</a></li>
    <li><a href="./python-lecture-python-OOP">Python 기초강의(6) - Python 객체지향</a></li>
    <li><a href="./python-lecture-python-magic-function">Python 기초강의(7) - Python Magic Function</a></li>
    <li><a href="./python-lecture-python-first-class">Python 기초강의(8) - Python First Class</a></li>
    <li><a href="./python-lecture-python-closure">Python 기초강의(9) - Python Closure</a></li>
    <li><a href="./python-lecture-python-decorator">Python 기초강의(10) - Python Decorator</a></li>
    <li><a href="./python-lecture-python-generator">Python 기초강의(11) - Python Generator</a></li>
    <li><a href="./python-lecture-python-module">Python 기초강의(12) - Python Module</a></li>
    <li><a href="./python-lecture-python-exception">Python 기초강의(13) - Python Exception &amp; File</a></li>
    <li><a href="./python-lecture-python-oop-exercise">Python 기초강의(14) - Python 연습문제(2)</a></li>
    <li><a href="./python-lecture-python-web-basic-jquery">Web basic &amp; jQuery(Front End Web Application)</a></li>
    <li><a href="./python-lecture-python-django-introduction">Python Django 웹 프레임워크(1) - introduction</a></li>
    <li><a href="./python-lecture-python-django-poll-project-1">Python Django 웹 프레임워크(2) - Poll project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-2">Python Django 웹 프레임워크(3) - Poll project 개발(2)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-3">Python Django 웹 프레임워크(4) - Poll project 개발(3)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-4">Python Django 웹 프레임워크(5) - Poll project 개발(4)</a></li>
    <li><a href="./python-lecture-python-django-poll-project-5">Python Django 웹 프레임워크(6) - Poll project 개발(5)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_1">Python Django 웹 프레임워크(7) - LectureSample project 개발(1)</a></li>
    <li><a href="./python-lecture-python-django-lecture-sample-project_2">Python Django 웹 프레임워크(8) - LectureSample project 개발(2)</a></li>


</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Python Data 처리 연습문제</strong></p>

<p>R에서 데이터 분석에 사용했던 mpg data set을 이용하여 python에서 데이터 분석 처리를
순수 프로그램으로 작성해보겠습니다.</p>

<p>먼저 R의 mpg data set을 txt 파일로 저장합니다.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## mpg data set 파일 저장</span><span class="w">

</span><span class="n">install.packages</span><span class="p">(</span><span class="s2">"ggplot2"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">mpg</span><span class="p">)</span><span class="w">

</span><span class="n">write.csv</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w">
          </span><span class="n">file</span><span class="o">=</span><span class="s2">"C:/Temp/mpg.txt"</span><span class="p">,</span><span class="w">
          </span><span class="n">row.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">,</span><span class="w">
          </span><span class="n">quote</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">,</span><span class="w">
          </span><span class="n">fileEncoding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"UTF-8"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><a href="/assets/downloads/mpg.txt" target="_blank">여기</a>를 클릭하면 <code class="highlighter-rouge">mpg.txt</code>을 다운받을 수 있습니다.
또한 <a href="https://www.rdocumentation.org/packages/ggplot2/versions/3.3.1/topics/mpg" target="_blank">R Documents - mpg dataset</a>
를 클릭하면 mpg data set에 대한 자세한 명세를 보실 수 있습니다.</p>

<p>이렇게 얻은 데이터 파일을 이용하여 python으로 다음의 문제를 해결합니다.</p>

<pre><code class="language-txt"># 1. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 
# 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 확인하세요.

# 2. 자동차 제조 회사에 따라 도시 연비가 다른지 알아보려고 한다. 
# "audi"와 "toyota" 중 어느 manufacturer(제조회사)의 cty(도시 연비)가 
# 평균적으로 더 높은지 확인하세요.

# 3. "chevrolet", "ford", "honda" 자동차의 고속도로 연비 평균을 알아보려고 한다. 
# 이 회사들의 데이터를 추출한 후 hwy(고속도로 연비) 평균을 구하세요.

# 4. "audi"에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 
# 높은지 알아보려고 한다. "audi"에서 생산한 자동차 중 hwy가 1~5위에 해당하는 
# 자동차의 데이터를 출력하세요.

# 5. mpg 데이터는 연비를 나타내는 변수가 2개입니다. 
# 두 변수를 각각 활용하는 대신 하나의 통합 연비 변수를 만들어 사용하려 합니다. 
# 평균 연비 변수는 두 연비(고속도로와 도시)의 평균을 이용합니다. 
# 회사별로 "suv" 자동차의 평균 연비를 구한후 내림차순으로 정렬한 후 1~5위까지 데이터를 출력하세요.

# 6. mpg 데이터의 class는 "suv", "compact" 등 자동차의 특징에 따라 
# 일곱 종류로 분류한 변수입니다. 어떤 차종의 도시 연비가 높은지 비교하려 합니다. 
# class별 cty 평균을 구하고 cty 평균이 높은 순으로 정렬해 출력하세요.

# 7. 어떤 회사 자동차의 hwy(고속도로 연비)가 가장 높은지 알아보려 합니다. 
# hwy(고속도로 연비) 평균이 가장 높은 회사 세 곳을 출력하세요.

# 8. 어떤 회사에서 "compact" 차종을 가장 많이 생산하는지 알아보려고 합니다. 
# 각 회사별 "compact" 차종 수를 내림차순으로 정렬해 출력하세요.
</code></pre>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Python 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.python.org/" target="_blank">Python Official HomePage</a></li>
    <li>점프 투 파이썬 - 이지스 퍼블리싱</li>
    <li>전문가를 위한 파이썬(Fluent Python) - 한빛미디어</li>
    <li>파이썬 웹 프로그래밍 - 한빛미디어</li>
    <li>이미지 출처 : <a href="http://www.freepik.com" target="_blank">Designed by rawpixel.com / Freepik</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
